#ifndef OV5640_H_
#define OV5640_H_

#include <linux/types.h>
#include <media/v4l2-common.h>
#include <media/soc_camera.h>
#include <linux/platform_data/camera-mmp.h>
#include "ecs-subdev.h"

#define OV5640_RESET_ADDR		0x3008
#define OV5640_RESET_VAL		0x80

enum {
	ISP_INPUT_X_SZ_H	= 0x3804,
	ISP_INPUT_X_SZ_L,
	ISP_INPUT_Y_SZ_H,
	ISP_INPUT_Y_SZ_L,
	ISP_OUTPUT_X_SZ_H	= 0x3808,
	ISP_OUTPUT_X_SZ_L,
	ISP_OUTPUT_Y_SZ_H,
	ISP_OUTPUT_Y_SZ_L,
	ISP_OUTPUT_X_TSZ_H	= 0x380C,
	ISP_OUTPUT_X_TSZ_L,
	ISP_OUTPUT_Y_TSZ_H,
	ISP_OUTPUT_Y_TSZ_L,
	SCAN_ARR_X_OFF_H	= 0x3824,
	SCAN_ARR_X_OFF_L,
	SCAN_ARR_Y_OFF_H,
	SCAN_ARR_Y_OFF_L,
	AEC_AVG_LEFT_H		= 0x5680,
	AEC_AVG_LEFT_L,
	AEC_AVG_RIGHT_H,
	AEC_AVG_RIGHT_L,
	AEC_AVG_TOP_H,
	AEC_AVG_TOP_L,
	AEC_AVG_BOTTOM_H,
	AEC_AVG_BOTTOM_L,
};

struct OV5640_FIRMWARE_ARRAY {
	u16 reg_base;
	unsigned char value[256];
	int len;
};

char *ov5640_get_profile(const struct i2c_client *client);
int ov5640_firmware_download(void *hw_ctx, const void *table, int size);
static int ov5640_g_frame_interval(struct v4l2_subdev *sd,
				struct v4l2_subdev_frame_interval *inter);

/********************************Register lists********************************/

struct OV5640_FIRMWARE_ARRAY ov5640_fw_none[] = {

};

struct OV5640_FIRMWARE_ARRAY ov5640_fw_sunny[] = {
	{
		.reg_base = 0x3000,
		.value = {
			0x20,
			},
		.len = 1,
	},
	{
		.reg_base = 0x8000,
		.value = {
			0x02, 0x0f, 0xd6, 0x02, 0x0a, 0x39, 0xc2, 0x01,
			0x22, 0x22, 0x00, 0x02, 0x0f, 0xb2, 0xe5, 0x1f,
			0x70, 0x72, 0xf5, 0x1e, 0xd2, 0x35, 0xff, 0xef,
			0x25, 0xe0, 0x24, 0x4e, 0xf8, 0xe4, 0xf6, 0x08,
			0xf6, 0x0f, 0xbf, 0x34, 0xf2, 0x90, 0x0e, 0x93,
			0xe4, 0x93, 0xff, 0xe5, 0x4b, 0xc3, 0x9f, 0x50,
			0x04, 0x7f, 0x05, 0x80, 0x02, 0x7f, 0xfb, 0x78,
			0xbd, 0xa6, 0x07, 0x12, 0x0f, 0x04, 0x40, 0x04,
			0x7f, 0x03, 0x80, 0x02, 0x7f, 0x30, 0x78, 0xbc,
			0xa6, 0x07, 0xe6, 0x18, 0xf6, 0x08, 0xe6, 0x78,
			0xb9, 0xf6, 0x78, 0xbc, 0xe6, 0x78, 0xba, 0xf6,
			0x78, 0xbf, 0x76, 0x33, 0xe4, 0x08, 0xf6, 0x78,
			0xb8, 0x76, 0x01, 0x75, 0x4a, 0x02, 0x78, 0xb6,
			0xf6, 0x08, 0xf6, 0x74, 0xff, 0x78, 0xc1, 0xf6,
			0x08, 0xf6, 0x75, 0x1f, 0x01, 0x78, 0xbc, 0xe6,
			0x75, 0xf0, 0x05, 0xa4, 0xf5, 0x4b, 0x12, 0x0a,
			0xff, 0xc2, 0x37, 0x22, 0x78, 0xb8, 0xe6, 0xd3,
			0x94, 0x00, 0x40, 0x02, 0x16, 0x22, 0xe5, 0x1f,
			0xb4, 0x05, 0x23, 0xe4, 0xf5, 0x1f, 0xc2, 0x01,
			0x78, 0xb6, 0xe6, 0xfe, 0x08, 0xe6, 0xff, 0x78,
			0x4e, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0xa2, 0x37,
			0xe4, 0x33, 0xf5, 0x3c, 0x90, 0x30, 0x28, 0xf0,
			0x75, 0x1e, 0x10, 0xd2, 0x35, 0x22, 0xe5, 0x4b,
			0x75, 0xf0, 0x05, 0x84, 0x78, 0xbc, 0xf6, 0x90,
			0x0e, 0x8c, 0xe4, 0x93, 0xff, 0x25, 0xe0, 0x24,
			0x0a, 0xf8, 0xe6, 0xfc, 0x08, 0xe6, 0xfd, 0x78,
			0xbc, 0xe6, 0x25, 0xe0, 0x24, 0x4e, 0xf8, 0xa6,
			0x04, 0x08, 0xa6, 0x05, 0xef, 0x12, 0x0f, 0x0b,
			0xd3, 0x78, 0xb7, 0x96, 0xee, 0x18, 0x96, 0x40,
			0x0d, 0x78, 0xbc, 0xe6, 0x78, 0xb9, 0xf6, 0x78,
			0xb6, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x90, 0x0e,
			0x8c, 0xe4, 0x93, 0x12, 0x0f, 0x0b, 0xc3, 0x78,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8100,
		.value = {
			0xc2, 0x96, 0xee, 0x18, 0x96, 0x50, 0x0d, 0x78,
			0xbc, 0xe6, 0x78, 0xba, 0xf6, 0x78, 0xc1, 0xa6,
			0x06, 0x08, 0xa6, 0x07, 0x78, 0xb6, 0xe6, 0xfe,
			0x08, 0xe6, 0xc3, 0x78, 0xc2, 0x96, 0xff, 0xee,
			0x18, 0x96, 0x78, 0xc3, 0xf6, 0x08, 0xa6, 0x07,
			0x90, 0x0e, 0x95, 0xe4, 0x18, 0x12, 0x0e, 0xe9,
			0x40, 0x02, 0xd2, 0x37, 0x78, 0xbc, 0xe6, 0x08,
			0x26, 0x08, 0xf6, 0xe5, 0x1f, 0x64, 0x01, 0x70,
			0x4a, 0xe6, 0xc3, 0x78, 0xc0, 0x12, 0x0e, 0xdf,
			0x40, 0x05, 0x12, 0x0e, 0xda, 0x40, 0x39, 0x12,
			0x0f, 0x02, 0x40, 0x04, 0x7f, 0xfe, 0x80, 0x02,
			0x7f, 0x02, 0x78, 0xbd, 0xa6, 0x07, 0x78, 0xb9,
			0xe6, 0x24, 0x03, 0x78, 0xbf, 0xf6, 0x78, 0xb9,
			0xe6, 0x24, 0xfd, 0x78, 0xc0, 0xf6, 0x12, 0x0f,
			0x02, 0x40, 0x06, 0x78, 0xc0, 0xe6, 0xff, 0x80,
			0x04, 0x78, 0xbf, 0xe6, 0xff, 0x78, 0xbe, 0xa6,
			0x07, 0x75, 0x1f, 0x02, 0x78, 0xb8, 0x76, 0x01,
			0x02, 0x02, 0x4a, 0xe5, 0x1f, 0x64, 0x02, 0x60,
			0x03, 0x02, 0x02, 0x2a, 0x78, 0xbe, 0xe6, 0xff,
			0xc3, 0x78, 0xc0, 0x12, 0x0e, 0xe0, 0x40, 0x08,
			0x12, 0x0e, 0xda, 0x50, 0x03, 0x02, 0x02, 0x28,
			0x12, 0x0f, 0x02, 0x40, 0x04, 0x7f, 0xff, 0x80,
			0x02, 0x7f, 0x01, 0x78, 0xbd, 0xa6, 0x07, 0x78,
			0xb9, 0xe6, 0x04, 0x78, 0xbf, 0xf6, 0x78, 0xb9,
			0xe6, 0x14, 0x78, 0xc0, 0xf6, 0x18, 0x12, 0x0f,
			0x04, 0x40, 0x04, 0xe6, 0xff, 0x80, 0x02, 0x7f,
			0x00, 0x78, 0xbf, 0xa6, 0x07, 0xd3, 0x08, 0xe6,
			0x64, 0x80, 0x94, 0x80, 0x40, 0x04, 0xe6, 0xff,
			0x80, 0x02, 0x7f, 0x00, 0x78, 0xc0, 0xa6, 0x07,
			0xc3, 0x18, 0xe6, 0x64, 0x80, 0x94, 0xb3, 0x50,
			0x04, 0xe6, 0xff, 0x80, 0x02, 0x7f, 0x33, 0x78,
			0xbf, 0xa6, 0x07, 0xc3, 0x08, 0xe6, 0x64, 0x80,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8200,
		.value = {
			0x94, 0xb3, 0x50, 0x04, 0xe6, 0xff, 0x80, 0x02,
			0x7f, 0x33, 0x78, 0xc0, 0xa6, 0x07, 0x12, 0x0f,
			0x02, 0x40, 0x06, 0x78, 0xc0, 0xe6, 0xff, 0x80,
			0x04, 0x78, 0xbf, 0xe6, 0xff, 0x78, 0xbe, 0xa6,
			0x07, 0x75, 0x1f, 0x03, 0x78, 0xb8, 0x76, 0x01,
			0x80, 0x20, 0xe5, 0x1f, 0x64, 0x03, 0x70, 0x26,
			0x78, 0xbe, 0xe6, 0xff, 0xc3, 0x78, 0xc0, 0x12,
			0x0e, 0xe0, 0x40, 0x05, 0x12, 0x0e, 0xda, 0x40,
			0x09, 0x78, 0xb9, 0xe6, 0x78, 0xbe, 0xf6, 0x75,
			0x1f, 0x04, 0x78, 0xbe, 0xe6, 0x75, 0xf0, 0x05,
			0xa4, 0xf5, 0x4b, 0x02, 0x0a, 0xff, 0xe5, 0x1f,
			0xb4, 0x04, 0x10, 0x90, 0x0e, 0x94, 0xe4, 0x78,
			0xc3, 0x12, 0x0e, 0xe9, 0x40, 0x02, 0xd2, 0x37,
			0x75, 0x1f, 0x05, 0x22, 0x30, 0x01, 0x03, 0x02,
			0x04, 0xc0, 0x30, 0x02, 0x03, 0x02, 0x04, 0xc0,
			0x90, 0x51, 0xa5, 0xe0, 0x78, 0x93, 0xf6, 0xa3,
			0xe0, 0x08, 0xf6, 0xa3, 0xe0, 0x08, 0xf6, 0xe5,
			0x1f, 0x70, 0x3c, 0x75, 0x1e, 0x20, 0xd2, 0x35,
			0x12, 0x0c, 0x7a, 0x78, 0x7e, 0xa6, 0x06, 0x08,
			0xa6, 0x07, 0x78, 0x8b, 0xa6, 0x09, 0x18, 0x76,
			0x01, 0x12, 0x0c, 0x5b, 0x78, 0x4e, 0xa6, 0x06,
			0x08, 0xa6, 0x07, 0x78, 0x8b, 0xe6, 0x78, 0x6e,
			0xf6, 0x75, 0x1f, 0x01, 0x78, 0x93, 0xe6, 0x78,
			0x90, 0xf6, 0x78, 0x94, 0xe6, 0x78, 0x91, 0xf6,
			0x78, 0x95, 0xe6, 0x78, 0x92, 0xf6, 0x22, 0x79,
			0x90, 0xe7, 0xd3, 0x78, 0x93, 0x96, 0x40, 0x05,
			0xe7, 0x96, 0xff, 0x80, 0x08, 0xc3, 0x79, 0x93,
			0xe7, 0x78, 0x90, 0x96, 0xff, 0x78, 0x88, 0x76,
			0x00, 0x08, 0xa6, 0x07, 0x79, 0x91, 0xe7, 0xd3,
			0x78, 0x94, 0x96, 0x40, 0x05, 0xe7, 0x96, 0xff,
			0x80, 0x08, 0xc3, 0x79, 0x94, 0xe7, 0x78, 0x91,
			0x96, 0xff, 0x12, 0x0c, 0x8e, 0x79, 0x92, 0xe7,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8300,
		.value = {
			0xd3, 0x78, 0x95, 0x96, 0x40, 0x05, 0xe7, 0x96,
			0xff, 0x80, 0x08, 0xc3, 0x79, 0x95, 0xe7, 0x78,
			0x92, 0x96, 0xff, 0x12, 0x0c, 0x8e, 0x12, 0x0c,
			0x5b, 0x78, 0x8a, 0xe6, 0x25, 0xe0, 0x24, 0x4e,
			0xf8, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x78, 0x8a,
			0xe6, 0x24, 0x6e, 0xf8, 0xa6, 0x09, 0x78, 0x8a,
			0xe6, 0x24, 0x01, 0xff, 0xe4, 0x33, 0xfe, 0xd3,
			0xef, 0x94, 0x0f, 0xee, 0x64, 0x80, 0x94, 0x80,
			0x40, 0x04, 0x7f, 0x00, 0x80, 0x05, 0x78, 0x8a,
			0xe6, 0x04, 0xff, 0x78, 0x8a, 0xa6, 0x07, 0xe5,
			0x1f, 0xb4, 0x01, 0x0a, 0xe6, 0x60, 0x03, 0x02,
			0x04, 0xc0, 0x75, 0x1f, 0x02, 0x22, 0x12, 0x0c,
			0x7a, 0x78, 0x80, 0xa6, 0x06, 0x08, 0xa6, 0x07,
			0x12, 0x0c, 0x7a, 0x78, 0x82, 0xa6, 0x06, 0x08,
			0xa6, 0x07, 0x78, 0x6e, 0xe6, 0x78, 0x8c, 0xf6,
			0x78, 0x6e, 0xe6, 0x78, 0x8d, 0xf6, 0x7f, 0x01,
			0xef, 0x25, 0xe0, 0x24, 0x4f, 0xf9, 0xc3, 0x78,
			0x81, 0xe6, 0x97, 0x18, 0xe6, 0x19, 0x97, 0x50,
			0x0a, 0x12, 0x0c, 0x82, 0x78, 0x80, 0xa6, 0x04,
			0x08, 0xa6, 0x05, 0x74, 0x6e, 0x2f, 0xf9, 0x78,
			0x8c, 0xe6, 0xc3, 0x97, 0x50, 0x08, 0x74, 0x6e,
			0x2f, 0xf8, 0xe6, 0x78, 0x8c, 0xf6, 0xef, 0x25,
			0xe0, 0x24, 0x4f, 0xf9, 0xd3, 0x78, 0x83, 0xe6,
			0x97, 0x18, 0xe6, 0x19, 0x97, 0x40, 0x0a, 0x12,
			0x0c, 0x82, 0x78, 0x82, 0xa6, 0x04, 0x08, 0xa6,
			0x05, 0x74, 0x6e, 0x2f, 0xf9, 0x78, 0x8d, 0xe6,
			0xd3, 0x97, 0x40, 0x08, 0x74, 0x6e, 0x2f, 0xf8,
			0xe6, 0x78, 0x8d, 0xf6, 0x0f, 0xef, 0x64, 0x10,
			0x70, 0x9e, 0xc3, 0x79, 0x81, 0xe7, 0x78, 0x83,
			0x96, 0xff, 0x19, 0xe7, 0x18, 0x96, 0x78, 0x84,
			0xf6, 0x08, 0xa6, 0x07, 0xc3, 0x79, 0x8c, 0xe7,
			0x78, 0x8d, 0x96, 0x08, 0xf6, 0xd3, 0x79, 0x81,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8400,
		.value = {
			0xe7, 0x78, 0x7f, 0x96, 0x19, 0xe7, 0x18, 0x96,
			0x40, 0x05, 0x09, 0xe7, 0x08, 0x80, 0x06, 0xc3,
			0x79, 0x7f, 0xe7, 0x78, 0x81, 0x96, 0xff, 0x19,
			0xe7, 0x18, 0x96, 0xfe, 0x78, 0x86, 0xa6, 0x06,
			0x08, 0xa6, 0x07, 0x79, 0x8c, 0xe7, 0xd3, 0x78,
			0x8b, 0x96, 0x40, 0x05, 0xe7, 0x96, 0xff, 0x80,
			0x08, 0xc3, 0x79, 0x8b, 0xe7, 0x78, 0x8c, 0x96,
			0xff, 0x78, 0x8f, 0xa6, 0x07, 0xe5, 0x1f, 0x64,
			0x02, 0x70, 0x69, 0x90, 0x0e, 0x91, 0x93, 0xff,
			0x18, 0xe6, 0xc3, 0x9f, 0x50, 0x72, 0x12, 0x0c,
			0x4a, 0x12, 0x0c, 0x2f, 0x90, 0x0e, 0x8e, 0x12,
			0x0c, 0x38, 0x78, 0x80, 0x12, 0x0c, 0x6b, 0x7b,
			0x04, 0x12, 0x0c, 0x1d, 0xc3, 0x12, 0x06, 0x45,
			0x50, 0x56, 0x90, 0x0e, 0x92, 0xe4, 0x93, 0xff,
			0x78, 0x8f, 0xe6, 0x9f, 0x40, 0x02, 0x80, 0x11,
			0x90, 0x0e, 0x90, 0xe4, 0x93, 0xff, 0xd3, 0x78,
			0x89, 0xe6, 0x9f, 0x18, 0xe6, 0x94, 0x00, 0x40,
			0x03, 0x75, 0x1f, 0x05, 0x12, 0x0c, 0x4a, 0x12,
			0x0c, 0x2f, 0x90, 0x0e, 0x8f, 0x12, 0x0c, 0x38,
			0x78, 0x7e, 0x12, 0x0c, 0x6b, 0x7b, 0x40, 0x12,
			0x0c, 0x1d, 0xd3, 0x12, 0x06, 0x45, 0x40, 0x18,
			0x75, 0x1f, 0x05, 0x22, 0xe5, 0x1f, 0xb4, 0x05,
			0x0f, 0xd2, 0x01, 0xc2, 0x02, 0xe4, 0xf5, 0x1f,
			0xf5, 0x1e, 0xd2, 0x35, 0xd2, 0x33, 0xd2, 0x36,
			0x22, 0xef, 0x8d, 0xf0, 0xa4, 0xa8, 0xf0, 0xcf,
			0x8c, 0xf0, 0xa4, 0x28, 0xce, 0x8d, 0xf0, 0xa4,
			0x2e, 0xfe, 0x22, 0xbc, 0x00, 0x0b, 0xbe, 0x00,
			0x29, 0xef, 0x8d, 0xf0, 0x84, 0xff, 0xad, 0xf0,
			0x22, 0xe4, 0xcc, 0xf8, 0x75, 0xf0, 0x08, 0xef,
			0x2f, 0xff, 0xee, 0x33, 0xfe, 0xec, 0x33, 0xfc,
			0xee, 0x9d, 0xec, 0x98, 0x40, 0x05, 0xfc, 0xee,
			0x9d, 0xfe, 0x0f, 0xd5, 0xf0, 0xe9, 0xe4, 0xce,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8500,
		.value = {
			0xfd, 0x22, 0xed, 0xf8, 0xf5, 0xf0, 0xee, 0x84,
			0x20, 0xd2, 0x1c, 0xfe, 0xad, 0xf0, 0x75, 0xf0,
			0x08, 0xef, 0x2f, 0xff, 0xed, 0x33, 0xfd, 0x40,
			0x07, 0x98, 0x50, 0x06, 0xd5, 0xf0, 0xf2, 0x22,
			0xc3, 0x98, 0xfd, 0x0f, 0xd5, 0xf0, 0xea, 0x22,
			0xe8, 0x8f, 0xf0, 0xa4, 0xcc, 0x8b, 0xf0, 0xa4,
			0x2c, 0xfc, 0xe9, 0x8e, 0xf0, 0xa4, 0x2c, 0xfc,
			0x8a, 0xf0, 0xed, 0xa4, 0x2c, 0xfc, 0xea, 0x8e,
			0xf0, 0xa4, 0xcd, 0xa8, 0xf0, 0x8b, 0xf0, 0xa4,
			0x2d, 0xcc, 0x38, 0x25, 0xf0, 0xfd, 0xe9, 0x8f,
			0xf0, 0xa4, 0x2c, 0xcd, 0x35, 0xf0, 0xfc, 0xeb,
			0x8e, 0xf0, 0xa4, 0xfe, 0xa9, 0xf0, 0xeb, 0x8f,
			0xf0, 0xa4, 0xcf, 0xc5, 0xf0, 0x2e, 0xcd, 0x39,
			0xfe, 0xe4, 0x3c, 0xfc, 0xea, 0xa4, 0x2d, 0xce,
			0x35, 0xf0, 0xfd, 0xe4, 0x3c, 0xfc, 0x22, 0x75,
			0xf0, 0x08, 0x75, 0x82, 0x00, 0xef, 0x2f, 0xff,
			0xee, 0x33, 0xfe, 0xcd, 0x33, 0xcd, 0xcc, 0x33,
			0xcc, 0xc5, 0x82, 0x33, 0xc5, 0x82, 0x9b, 0xed,
			0x9a, 0xec, 0x99, 0xe5, 0x82, 0x98, 0x40, 0x0c,
			0xf5, 0x82, 0xee, 0x9b, 0xfe, 0xed, 0x9a, 0xfd,
			0xec, 0x99, 0xfc, 0x0f, 0xd5, 0xf0, 0xd6, 0xe4,
			0xce, 0xfb, 0xe4, 0xcd, 0xfa, 0xe4, 0xcc, 0xf9,
			0xa8, 0x82, 0x22, 0xb8, 0x00, 0xc1, 0xb9, 0x00,
			0x59, 0xba, 0x00, 0x2d, 0xec, 0x8b, 0xf0, 0x84,
			0xcf, 0xce, 0xcd, 0xfc, 0xe5, 0xf0, 0xcb, 0xf9,
			0x78, 0x18, 0xef, 0x2f, 0xff, 0xee, 0x33, 0xfe,
			0xed, 0x33, 0xfd, 0xec, 0x33, 0xfc, 0xeb, 0x33,
			0xfb, 0x10, 0xd7, 0x03, 0x99, 0x40, 0x04, 0xeb,
			0x99, 0xfb, 0x0f, 0xd8, 0xe5, 0xe4, 0xf9, 0xfa,
			0x22, 0x78, 0x18, 0xef, 0x2f, 0xff, 0xee, 0x33,
			0xfe, 0xed, 0x33, 0xfd, 0xec, 0x33, 0xfc, 0xc9,
			0x33, 0xc9, 0x10, 0xd7, 0x05, 0x9b, 0xe9, 0x9a,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8600,
		.value = {
			0x40, 0x07, 0xec, 0x9b, 0xfc, 0xe9, 0x9a, 0xf9,
			0x0f, 0xd8, 0xe0, 0xe4, 0xc9, 0xfa, 0xe4, 0xcc,
			0xfb, 0x22, 0x75, 0xf0, 0x10, 0xef, 0x2f, 0xff,
			0xee, 0x33, 0xfe, 0xed, 0x33, 0xfd, 0xcc, 0x33,
			0xcc, 0xc8, 0x33, 0xc8, 0x10, 0xd7, 0x07, 0x9b,
			0xec, 0x9a, 0xe8, 0x99, 0x40, 0x0a, 0xed, 0x9b,
			0xfd, 0xec, 0x9a, 0xfc, 0xe8, 0x99, 0xf8, 0x0f,
			0xd5, 0xf0, 0xda, 0xe4, 0xcd, 0xfb, 0xe4, 0xcc,
			0xfa, 0xe4, 0xc8, 0xf9, 0x22, 0xeb, 0x9f, 0xf5,
			0xf0, 0xea, 0x9e, 0x42, 0xf0, 0xe9, 0x9d, 0x42,
			0xf0, 0xe8, 0x9c, 0x45, 0xf0, 0x22, 0xe8, 0x60,
			0x0f, 0xec, 0xc3, 0x13, 0xfc, 0xed, 0x13, 0xfd,
			0xee, 0x13, 0xfe, 0xef, 0x13, 0xff, 0xd8, 0xf1,
			0x22, 0xe8, 0x60, 0x0f, 0xef, 0xc3, 0x33, 0xff,
			0xee, 0x33, 0xfe, 0xed, 0x33, 0xfd, 0xec, 0x33,
			0xfc, 0xd8, 0xf1, 0x22, 0xe4, 0x93, 0xfc, 0x74,
			0x01, 0x93, 0xfd, 0x74, 0x02, 0x93, 0xfe, 0x74,
			0x03, 0x93, 0xff, 0x22, 0xe6, 0xfb, 0x08, 0xe6,
			0xf9, 0x08, 0xe6, 0xfa, 0x08, 0xe6, 0xcb, 0xf8,
			0x22, 0xec, 0xf6, 0x08, 0xed, 0xf6, 0x08, 0xee,
			0xf6, 0x08, 0xef, 0xf6, 0x22, 0xa4, 0x25, 0x82,
			0xf5, 0x82, 0xe5, 0xf0, 0x35, 0x83, 0xf5, 0x83,
			0x22, 0xd0, 0x83, 0xd0, 0x82, 0xf8, 0xe4, 0x93,
			0x70, 0x12, 0x74, 0x01, 0x93, 0x70, 0x0d, 0xa3,
			0xa3, 0x93, 0xf8, 0x74, 0x01, 0x93, 0xf5, 0x82,
			0x88, 0x83, 0xe4, 0x73, 0x74, 0x02, 0x93, 0x68,
			0x60, 0xef, 0xa3, 0xa3, 0xa3, 0x80, 0xdf, 0x90,
			0x38, 0x04, 0x78, 0x52, 0x12, 0x0b, 0xfd, 0x90,
			0x38, 0x00, 0xe0, 0xfe, 0xa3, 0xe0, 0xfd, 0xed,
			0xff, 0xc3, 0x12, 0x0b, 0x9e, 0x90, 0x38, 0x10,
			0x12, 0x0b, 0x92, 0x90, 0x38, 0x06, 0x78, 0x54,
			0x12, 0x0b, 0xfd, 0x90, 0x38, 0x02, 0xe0, 0xfe,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8700,
		.value = {
			0xa3, 0xe0, 0xfd, 0xed, 0xff, 0xc3, 0x12, 0x0b,
			0x9e, 0x90, 0x38, 0x12, 0x12, 0x0b, 0x92, 0xa3,
			0xe0, 0xb4, 0x31, 0x07, 0x78, 0x52, 0x79, 0x52,
			0x12, 0x0c, 0x13, 0x90, 0x38, 0x14, 0xe0, 0xb4,
			0x71, 0x15, 0x78, 0x52, 0xe6, 0xfe, 0x08, 0xe6,
			0x78, 0x02, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8,
			0xf9, 0x79, 0x53, 0xf7, 0xee, 0x19, 0xf7, 0x90,
			0x38, 0x15, 0xe0, 0xb4, 0x31, 0x07, 0x78, 0x54,
			0x79, 0x54, 0x12, 0x0c, 0x13, 0x90, 0x38, 0x15,
			0xe0, 0xb4, 0x71, 0x15, 0x78, 0x54, 0xe6, 0xfe,
			0x08, 0xe6, 0x78, 0x02, 0xce, 0xc3, 0x13, 0xce,
			0x13, 0xd8, 0xf9, 0x79, 0x55, 0xf7, 0xee, 0x19,
			0xf7, 0x79, 0x52, 0x12, 0x0b, 0xd9, 0x09, 0x12,
			0x0b, 0xd9, 0xaf, 0x47, 0x12, 0x0b, 0xb2, 0xe5,
			0x44, 0xfb, 0x7a, 0x00, 0xfd, 0x7c, 0x00, 0x12,
			0x04, 0xd3, 0x78, 0x5a, 0xa6, 0x06, 0x08, 0xa6,
			0x07, 0xaf, 0x45, 0x12, 0x0b, 0xb2, 0xad, 0x03,
			0x7c, 0x00, 0x12, 0x04, 0xd3, 0x78, 0x56, 0xa6,
			0x06, 0x08, 0xa6, 0x07, 0xaf, 0x48, 0x78, 0x54,
			0x12, 0x0b, 0xb4, 0xe5, 0x43, 0xfb, 0xfd, 0x7c,
			0x00, 0x12, 0x04, 0xd3, 0x78, 0x5c, 0xa6, 0x06,
			0x08, 0xa6, 0x07, 0xaf, 0x46, 0x7e, 0x00, 0x78,
			0x54, 0x12, 0x0b, 0xb6, 0xad, 0x03, 0x7c, 0x00,
			0x12, 0x04, 0xd3, 0x78, 0x58, 0xa6, 0x06, 0x08,
			0xa6, 0x07, 0xc3, 0x78, 0x5b, 0xe6, 0x94, 0x08,
			0x18, 0xe6, 0x94, 0x00, 0x50, 0x05, 0x76, 0x00,
			0x08, 0x76, 0x08, 0xc3, 0x78, 0x5d, 0xe6, 0x94,
			0x08, 0x18, 0xe6, 0x94, 0x00, 0x50, 0x05, 0x76,
			0x00, 0x08, 0x76, 0x08, 0x78, 0x5a, 0x12, 0x0b,
			0xc6, 0xff, 0xd3, 0x78, 0x57, 0xe6, 0x9f, 0x18,
			0xe6, 0x9e, 0x40, 0x0e, 0x78, 0x5a, 0xe6, 0x13,
			0xfe, 0x08, 0xe6, 0x78, 0x57, 0x12, 0x0c, 0x08,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8800,
		.value = {
			0x80, 0x04, 0x7e, 0x00, 0x7f, 0x00, 0x78, 0x5e,
			0x12, 0x0b, 0xbe, 0xff, 0xd3, 0x78, 0x59, 0xe6,
			0x9f, 0x18, 0xe6, 0x9e, 0x40, 0x0e, 0x78, 0x5c,
			0xe6, 0x13, 0xfe, 0x08, 0xe6, 0x78, 0x59, 0x12,
			0x0c, 0x08, 0x80, 0x04, 0x7e, 0x00, 0x7f, 0x00,
			0xe4, 0xfc, 0xfd, 0x78, 0x62, 0x12, 0x06, 0x99,
			0x78, 0x5a, 0x12, 0x0b, 0xc6, 0x78, 0x57, 0x26,
			0xff, 0xee, 0x18, 0x36, 0xfe, 0x78, 0x66, 0x12,
			0x0b, 0xbe, 0x78, 0x59, 0x26, 0xff, 0xee, 0x18,
			0x36, 0xfe, 0xe4, 0xfc, 0xfd, 0x78, 0x6a, 0x12,
			0x06, 0x99, 0x12, 0x0b, 0xce, 0x78, 0x66, 0x12,
			0x06, 0x8c, 0xd3, 0x12, 0x06, 0x45, 0x40, 0x08,
			0x12, 0x0b, 0xce, 0x78, 0x66, 0x12, 0x06, 0x99,
			0x78, 0x54, 0x12, 0x0b, 0xd0, 0x78, 0x6a, 0x12,
			0x06, 0x8c, 0xd3, 0x12, 0x06, 0x45, 0x40, 0x0a,
			0x78, 0x54, 0x12, 0x0b, 0xd0, 0x78, 0x6a, 0x12,
			0x06, 0x99, 0x78, 0x61, 0xe6, 0x90, 0x60, 0x01,
			0xf0, 0x78, 0x65, 0xe6, 0xa3, 0xf0, 0x78, 0x69,
			0xe6, 0xa3, 0xf0, 0x78, 0x55, 0xe6, 0xa3, 0xf0,
			0x7d, 0x01, 0x78, 0x61, 0x12, 0x0b, 0xe9, 0x24,
			0x01, 0x12, 0x0b, 0xa6, 0x78, 0x65, 0x12, 0x0b,
			0xe9, 0x24, 0x02, 0x12, 0x0b, 0xa6, 0x78, 0x69,
			0x12, 0x0b, 0xe9, 0x24, 0x03, 0x12, 0x0b, 0xa6,
			0x78, 0x6d, 0x12, 0x0b, 0xe9, 0x24, 0x04, 0x12,
			0x0b, 0xa6, 0x0d, 0xbd, 0x05, 0xd4, 0xc2, 0x0e,
			0xc2, 0x06, 0x22, 0x85, 0x08, 0x41, 0x90, 0x30,
			0x24, 0xe0, 0xf5, 0x3d, 0xa3, 0xe0, 0xf5, 0x3e,
			0xa3, 0xe0, 0xf5, 0x3f, 0xa3, 0xe0, 0xf5, 0x40,
			0xa3, 0xe0, 0xf5, 0x3c, 0xd2, 0x34, 0xe5, 0x41,
			0x12, 0x06, 0xb1, 0x09, 0x31, 0x03, 0x09, 0x35,
			0x04, 0x09, 0x3b, 0x05, 0x09, 0x3e, 0x06, 0x09,
			0x41, 0x07, 0x09, 0x4a, 0x08, 0x09, 0x5b, 0x12,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8900,
		.value = {
			0x09, 0x73, 0x18, 0x09, 0x89, 0x19, 0x09, 0x5e,
			0x1a, 0x09, 0x6a, 0x1b, 0x09, 0xad, 0x80, 0x09,
			0xb2, 0x81, 0x0a, 0x1d, 0x8f, 0x0a, 0x09, 0x90,
			0x0a, 0x1d, 0x91, 0x0a, 0x1d, 0x92, 0x0a, 0x1d,
			0x93, 0x0a, 0x1d, 0x94, 0x0a, 0x1d, 0x98, 0x0a,
			0x17, 0x9f, 0x0a, 0x1a, 0xec, 0x00, 0x00, 0x0a,
			0x38, 0x12, 0x0f, 0x74, 0x22, 0x12, 0x0f, 0x74,
			0xd2, 0x03, 0x22, 0xd2, 0x03, 0x22, 0xc2, 0x03,
			0x22, 0xa2, 0x37, 0xe4, 0x33, 0xf5, 0x3c, 0x02,
			0x0a, 0x1d, 0xc2, 0x01, 0xc2, 0x02, 0xc2, 0x03,
			0x12, 0x0d, 0x0d, 0x75, 0x1e, 0x70, 0xd2, 0x35,
			0x02, 0x0a, 0x1d, 0x02, 0x0a, 0x04, 0x85, 0x40,
			0x4a, 0x85, 0x3c, 0x4b, 0x12, 0x0a, 0xff, 0x02,
			0x0a, 0x1d, 0x85, 0x4a, 0x40, 0x85, 0x4b, 0x3c,
			0x02, 0x0a, 0x1d, 0xe4, 0xf5, 0x22, 0xf5, 0x23,
			0x85, 0x40, 0x31, 0x85, 0x3f, 0x30, 0x85, 0x3e,
			0x2f, 0x85, 0x3d, 0x2e, 0x12, 0x0f, 0x46, 0x80,
			0x1f, 0x75, 0x22, 0x00, 0x75, 0x23, 0x01, 0x74,
			0xff, 0xf5, 0x2d, 0xf5, 0x2c, 0xf5, 0x2b, 0xf5,
			0x2a, 0x12, 0x0f, 0x46, 0x85, 0x2d, 0x40, 0x85,
			0x2c, 0x3f, 0x85, 0x2b, 0x3e, 0x85, 0x2a, 0x3d,
			0xe4, 0xf5, 0x3c, 0x80, 0x70, 0x12, 0x0f, 0x16,
			0x80, 0x6b, 0x85, 0x3d, 0x45, 0x85, 0x3e, 0x46,
			0xe5, 0x47, 0xc3, 0x13, 0xff, 0xe5, 0x45, 0xc3,
			0x9f, 0x50, 0x02, 0x8f, 0x45, 0xe5, 0x48, 0xc3,
			0x13, 0xff, 0xe5, 0x46, 0xc3, 0x9f, 0x50, 0x02,
			0x8f, 0x46, 0xe5, 0x47, 0xc3, 0x13, 0xff, 0xfd,
			0xe5, 0x45, 0x2d, 0xfd, 0xe4, 0x33, 0xfc, 0xe5,
			0x44, 0x12, 0x0f, 0x90, 0x40, 0x05, 0xe5, 0x44,
			0x9f, 0xf5, 0x45, 0xe5, 0x48, 0xc3, 0x13, 0xff,
			0xfd, 0xe5, 0x46, 0x2d, 0xfd, 0xe4, 0x33, 0xfc,
			0xe5, 0x43, 0x12, 0x0f, 0x90, 0x40, 0x05, 0xe5,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8a00,
		.value = {
			0x43, 0x9f, 0xf5, 0x46, 0x12, 0x06, 0xd7, 0x80,
			0x14, 0x85, 0x40, 0x48, 0x85, 0x3f, 0x47, 0x85,
			0x3e, 0x46, 0x85, 0x3d, 0x45, 0x80, 0x06, 0x02,
			0x06, 0xd7, 0x12, 0x0d, 0x7e, 0x90, 0x30, 0x24,
			0xe5, 0x3d, 0xf0, 0xa3, 0xe5, 0x3e, 0xf0, 0xa3,
			0xe5, 0x3f, 0xf0, 0xa3, 0xe5, 0x40, 0xf0, 0xa3,
			0xe5, 0x3c, 0xf0, 0x90, 0x30, 0x23, 0xe4, 0xf0,
			0x22, 0xc0, 0xe0, 0xc0, 0x83, 0xc0, 0x82, 0xc0,
			0xd0, 0x90, 0x3f, 0x0c, 0xe0, 0xf5, 0x32, 0xe5,
			0x32, 0x30, 0xe3, 0x74, 0x30, 0x36, 0x66, 0x90,
			0x60, 0x19, 0xe0, 0xf5, 0x0a, 0xa3, 0xe0, 0xf5,
			0x0b, 0x90, 0x60, 0x1d, 0xe0, 0xf5, 0x14, 0xa3,
			0xe0, 0xf5, 0x15, 0x90, 0x60, 0x21, 0xe0, 0xf5,
			0x0c, 0xa3, 0xe0, 0xf5, 0x0d, 0x90, 0x60, 0x29,
			0xe0, 0xf5, 0x0e, 0xa3, 0xe0, 0xf5, 0x0f, 0x90,
			0x60, 0x31, 0xe0, 0xf5, 0x10, 0xa3, 0xe0, 0xf5,
			0x11, 0x90, 0x60, 0x39, 0xe0, 0xf5, 0x12, 0xa3,
			0xe0, 0xf5, 0x13, 0x30, 0x01, 0x06, 0x30, 0x33,
			0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92, 0x09, 0x30,
			0x02, 0x06, 0x30, 0x33, 0x03, 0xd3, 0x80, 0x01,
			0xc3, 0x92, 0x0a, 0x30, 0x33, 0x0c, 0x30, 0x03,
			0x09, 0x20, 0x02, 0x06, 0x20, 0x01, 0x03, 0xd3,
			0x80, 0x01, 0xc3, 0x92, 0x0b, 0x90, 0x30, 0x01,
			0xe0, 0x44, 0x40, 0xf0, 0xe0, 0x54, 0xbf, 0xf0,
			0xe5, 0x32, 0x30, 0xe1, 0x14, 0x30, 0x34, 0x11,
			0x90, 0x30, 0x22, 0xe0, 0xf5, 0x08, 0xe4, 0xf0,
			0x30, 0x00, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92,
			0x08, 0xe5, 0x32, 0x30, 0xe5, 0x12, 0x90, 0x56,
			0xa1, 0xe0, 0xf5, 0x09, 0x30, 0x31, 0x09, 0x30,
			0x05, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92, 0x0d,
			0x90, 0x3f, 0x0c, 0xe5, 0x32, 0xf0, 0xd0, 0xd0,
			0xd0, 0x82, 0xd0, 0x83, 0xd0, 0xe0, 0x32, 0x90,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8b00,
		.value = {
			0x0e, 0x7e, 0xe4, 0x93, 0xfe, 0x74, 0x01, 0x93,
			0xff, 0xc3, 0x90, 0x0e, 0x7c, 0x74, 0x01, 0x93,
			0x9f, 0xff, 0xe4, 0x93, 0x9e, 0xfe, 0xe4, 0x8f,
			0x3b, 0x8e, 0x3a, 0xf5, 0x39, 0xf5, 0x38, 0xab,
			0x3b, 0xaa, 0x3a, 0xa9, 0x39, 0xa8, 0x38, 0xaf,
			0x4b, 0xfc, 0xfd, 0xfe, 0x12, 0x05, 0x28, 0x12,
			0x0d, 0xe1, 0xe4, 0x7b, 0xff, 0xfa, 0xf9, 0xf8,
			0x12, 0x05, 0xb3, 0x12, 0x0d, 0xe1, 0x90, 0x0e,
			0x69, 0xe4, 0x12, 0x0d, 0xf6, 0x12, 0x0d, 0xe1,
			0xe4, 0x85, 0x4a, 0x37, 0xf5, 0x36, 0xf5, 0x35,
			0xf5, 0x34, 0xaf, 0x37, 0xae, 0x36, 0xad, 0x35,
			0xac, 0x34, 0xa3, 0x12, 0x0d, 0xf6, 0x8f, 0x37,
			0x8e, 0x36, 0x8d, 0x35, 0x8c, 0x34, 0xe5, 0x3b,
			0x45, 0x37, 0xf5, 0x3b, 0xe5, 0x3a, 0x45, 0x36,
			0xf5, 0x3a, 0xe5, 0x39, 0x45, 0x35, 0xf5, 0x39,
			0xe5, 0x38, 0x45, 0x34, 0xf5, 0x38, 0xe4, 0xf5,
			0x22, 0xf5, 0x23, 0x85, 0x3b, 0x31, 0x85, 0x3a,
			0x30, 0x85, 0x39, 0x2f, 0x85, 0x38, 0x2e, 0x02,
			0x0f, 0x46, 0xe0, 0xa3, 0xe0, 0x75, 0xf0, 0x02,
			0xa4, 0xff, 0xae, 0xf0, 0xc3, 0x08, 0xe6, 0x9f,
			0xf6, 0x18, 0xe6, 0x9e, 0xf6, 0x22, 0xff, 0xe5,
			0xf0, 0x34, 0x60, 0x8f, 0x82, 0xf5, 0x83, 0xec,
			0xf0, 0x22, 0x78, 0x52, 0x7e, 0x00, 0xe6, 0xfc,
			0x08, 0xe6, 0xfd, 0x02, 0x04, 0xc1, 0xe4, 0xfc,
			0xfd, 0x12, 0x06, 0x99, 0x78, 0x5c, 0xe6, 0xc3,
			0x13, 0xfe, 0x08, 0xe6, 0x13, 0x22, 0x78, 0x52,
			0xe6, 0xfe, 0x08, 0xe6, 0xff, 0xe4, 0xfc, 0xfd,
			0x22, 0xe7, 0xc4, 0xf8, 0x54, 0xf0, 0xc8, 0x68,
			0xf7, 0x09, 0xe7, 0xc4, 0x54, 0x0f, 0x48, 0xf7,
			0x22, 0xe6, 0xfc, 0xed, 0x75, 0xf0, 0x04, 0xa4,
			0x22, 0x12, 0x06, 0x7c, 0x8f, 0x48, 0x8e, 0x47,
			0x8d, 0x46, 0x8c, 0x45, 0x22, 0xe0, 0xfe, 0xa3,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8c00,
		.value = {
			0xe0, 0xfd, 0xee, 0xf6, 0xed, 0x08, 0xf6, 0x22,
			0x13, 0xff, 0xc3, 0xe6, 0x9f, 0xff, 0x18, 0xe6,
			0x9e, 0xfe, 0x22, 0xe6, 0xc3, 0x13, 0xf7, 0x08,
			0xe6, 0x13, 0x09, 0xf7, 0x22, 0xad, 0x39, 0xac,
			0x38, 0xfa, 0xf9, 0xf8, 0x12, 0x05, 0x28, 0x8f,
			0x3b, 0x8e, 0x3a, 0x8d, 0x39, 0x8c, 0x38, 0xab,
			0x37, 0xaa, 0x36, 0xa9, 0x35, 0xa8, 0x34, 0x22,
			0x93, 0xff, 0xe4, 0xfc, 0xfd, 0xfe, 0x12, 0x05,
			0x28, 0x8f, 0x37, 0x8e, 0x36, 0x8d, 0x35, 0x8c,
			0x34, 0x22, 0x78, 0x84, 0xe6, 0xfe, 0x08, 0xe6,
			0xff, 0xe4, 0x8f, 0x37, 0x8e, 0x36, 0xf5, 0x35,
			0xf5, 0x34, 0x22, 0x90, 0x0e, 0x8c, 0xe4, 0x93,
			0x25, 0xe0, 0x24, 0x0a, 0xf8, 0xe6, 0xfe, 0x08,
			0xe6, 0xff, 0x22, 0xe6, 0xfe, 0x08, 0xe6, 0xff,
			0xe4, 0x8f, 0x3b, 0x8e, 0x3a, 0xf5, 0x39, 0xf5,
			0x38, 0x22, 0x78, 0x4e, 0xe6, 0xfe, 0x08, 0xe6,
			0xff, 0x22, 0xef, 0x25, 0xe0, 0x24, 0x4e, 0xf8,
			0xe6, 0xfc, 0x08, 0xe6, 0xfd, 0x22, 0x78, 0x89,
			0xef, 0x26, 0xf6, 0x18, 0xe4, 0x36, 0xf6, 0x22,
			0x75, 0x89, 0x03, 0x75, 0xa8, 0x01, 0x75, 0xb8,
			0x04, 0x75, 0x34, 0xff, 0x75, 0x35, 0x0e, 0x75,
			0x36, 0x15, 0x75, 0x37, 0x0d, 0x12, 0x0e, 0x9a,
			0x12, 0x00, 0x09, 0x12, 0x0f, 0x16, 0x12, 0x00,
			0x06, 0xd2, 0x00, 0xd2, 0x34, 0xd2, 0xaf, 0x75,
			0x34, 0xff, 0x75, 0x35, 0x0e, 0x75, 0x36, 0x49,
			0x75, 0x37, 0x03, 0x12, 0x0e, 0x9a, 0x30, 0x08,
			0x09, 0xc2, 0x34, 0x12, 0x08, 0xcb, 0xc2, 0x08,
			0xd2, 0x34, 0x30, 0x0b, 0x09, 0xc2, 0x36, 0x12,
			0x02, 0x6c, 0xc2, 0x0b, 0xd2, 0x36, 0x30, 0x09,
			0x09, 0xc2, 0x36, 0x12, 0x00, 0x0e, 0xc2, 0x09,
			0xd2, 0x36, 0x30, 0x0e, 0x03, 0x12, 0x06, 0xd7,
			0x30, 0x35, 0xd3, 0x90, 0x30, 0x29, 0xe5, 0x1e,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8d00,
		.value = {
			0xf0, 0xb4, 0x10, 0x05, 0x90, 0x30, 0x23, 0xe4,
			0xf0, 0xc2, 0x35, 0x80, 0xc1, 0xe4, 0xf5, 0x4b,
			0x90, 0x0e, 0x7a, 0x93, 0xff, 0xe4, 0x8f, 0x37,
			0xf5, 0x36, 0xf5, 0x35, 0xf5, 0x34, 0xaf, 0x37,
			0xae, 0x36, 0xad, 0x35, 0xac, 0x34, 0x90, 0x0e,
			0x6a, 0x12, 0x0d, 0xf6, 0x8f, 0x37, 0x8e, 0x36,
			0x8d, 0x35, 0x8c, 0x34, 0x90, 0x0e, 0x72, 0x12,
			0x06, 0x7c, 0xef, 0x45, 0x37, 0xf5, 0x37, 0xee,
			0x45, 0x36, 0xf5, 0x36, 0xed, 0x45, 0x35, 0xf5,
			0x35, 0xec, 0x45, 0x34, 0xf5, 0x34, 0xe4, 0xf5,
			0x22, 0xf5, 0x23, 0x85, 0x37, 0x31, 0x85, 0x36,
			0x30, 0x85, 0x35, 0x2f, 0x85, 0x34, 0x2e, 0x12,
			0x0f, 0x46, 0xe4, 0xf5, 0x22, 0xf5, 0x23, 0x90,
			0x0e, 0x72, 0x12, 0x0d, 0xea, 0x12, 0x0f, 0x46,
			0xe4, 0xf5, 0x22, 0xf5, 0x23, 0x90, 0x0e, 0x6e,
			0x12, 0x0d, 0xea, 0x02, 0x0f, 0x46, 0xe5, 0x40,
			0x24, 0xf2, 0xf5, 0x37, 0xe5, 0x3f, 0x34, 0x43,
			0xf5, 0x36, 0xe5, 0x3e, 0x34, 0xa2, 0xf5, 0x35,
			0xe5, 0x3d, 0x34, 0x28, 0xf5, 0x34, 0xe5, 0x37,
			0xff, 0xe4, 0xfe, 0xfd, 0xfc, 0x78, 0x18, 0x12,
			0x06, 0x69, 0x8f, 0x40, 0x8e, 0x3f, 0x8d, 0x3e,
			0x8c, 0x3d, 0xe5, 0x37, 0x54, 0xa0, 0xff, 0xe5,
			0x36, 0xfe, 0xe4, 0xfd, 0xfc, 0x78, 0x07, 0x12,
			0x06, 0x56, 0x78, 0x10, 0x12, 0x0f, 0x9a, 0xe4,
			0xff, 0xfe, 0xe5, 0x35, 0xfd, 0xe4, 0xfc, 0x78,
			0x0e, 0x12, 0x06, 0x56, 0x12, 0x0f, 0x9d, 0xe4,
			0xff, 0xfe, 0xfd, 0xe5, 0x34, 0xfc, 0x78, 0x18,
			0x12, 0x06, 0x56, 0x78, 0x08, 0x12, 0x0f, 0x9a,
			0x22, 0x8f, 0x3b, 0x8e, 0x3a, 0x8d, 0x39, 0x8c,
			0x38, 0x22, 0x12, 0x06, 0x7c, 0x8f, 0x31, 0x8e,
			0x30, 0x8d, 0x2f, 0x8c, 0x2e, 0x22, 0x93, 0xf9,
			0xf8, 0x02, 0x06, 0x69, 0x00, 0x00, 0x00, 0x00,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8e00,
		.value = {
			0x12, 0x01, 0x17, 0x08, 0x31, 0x15, 0x53, 0x54,
			0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x13, 0x01,
			0x10, 0x01, 0x56, 0x40, 0x1a, 0x30, 0x29, 0x7e,
			0x00, 0x30, 0x04, 0x20, 0xdf, 0x30, 0x05, 0x40,
			0xbf, 0x50, 0x03, 0x00, 0xfd, 0x50, 0x27, 0x01,
			0xfe, 0x60, 0x00, 0x11, 0x00, 0x3f, 0x05, 0x30,
			0x00, 0x3f, 0x06, 0x22, 0x00, 0x3f, 0x01, 0x2a,
			0x00, 0x3f, 0x02, 0x00, 0x00, 0x36, 0x06, 0x07,
			0x00, 0x3f, 0x0b, 0x0f, 0xf0, 0x00, 0x00, 0x00,
			0x00, 0x30, 0x01, 0x40, 0xbf, 0x30, 0x01, 0x00,
			0xbf, 0x30, 0x29, 0x70, 0x00, 0x3a, 0x00, 0x00,
			0xff, 0x3a, 0x00, 0x00, 0xff, 0x36, 0x03, 0x36,
			0x02, 0x41, 0x44, 0x58, 0x20, 0x18, 0x10, 0x0a,
			0x04, 0x04, 0x00, 0x03, 0xff, 0x64, 0x00, 0x00,
			0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
			0x04, 0x06, 0x06, 0x00, 0x02, 0x60, 0x00, 0x70,
			0x50, 0x3c, 0x28, 0x1e, 0x10, 0x10, 0x50, 0x2d,
			0x28, 0x16, 0x10, 0x10, 0x02, 0x00, 0x10, 0x0a,
			0x0d, 0x04, 0x0a, 0x6e, 0x0a, 0x05, 0x00, 0xa5,
			0x5a, 0x00, 0xae, 0x35, 0xaf, 0x36, 0xe4, 0xfd,
			0xed, 0xc3, 0x95, 0x37, 0x50, 0x33, 0x12, 0x0f,
			0xe2, 0xe4, 0x93, 0xf5, 0x38, 0x74, 0x01, 0x93,
			0xf5, 0x39, 0x45, 0x38, 0x60, 0x23, 0x85, 0x39,
			0x82, 0x85, 0x38, 0x83, 0xe0, 0xfc, 0x12, 0x0f,
			0xe2, 0x74, 0x03, 0x93, 0x52, 0x04, 0x12, 0x0f,
			0xe2, 0x74, 0x02, 0x93, 0x42, 0x04, 0x85, 0x39,
			0x82, 0x85, 0x38, 0x83, 0xec, 0xf0, 0x0d, 0x80,
			0xc7, 0x22, 0x78, 0xbe, 0xe6, 0xd3, 0x08, 0xff,
			0xe6, 0x64, 0x80, 0xf8, 0xef, 0x64, 0x80, 0x98,
			0x22, 0x93, 0xff, 0x7e, 0x00, 0xe6, 0xfc, 0x08,
			0xe6, 0xfd, 0x12, 0x04, 0xc1, 0x78, 0xc1, 0xe6,
			0xfc, 0x08, 0xe6, 0xfd, 0xd3, 0xef, 0x9d, 0xee,
			},
		.len = 256,
	},
	{
		.reg_base = 0x8f00,
		.value = {
			0x9c, 0x22, 0x78, 0xbd, 0xd3, 0xe6, 0x64, 0x80,
			0x94, 0x80, 0x22, 0x25, 0xe0, 0x24, 0x0a, 0xf8,
			0xe6, 0xfe, 0x08, 0xe6, 0xff, 0x22, 0xe5, 0x3c,
			0xd3, 0x94, 0x00, 0x40, 0x0b, 0x90, 0x0e, 0x88,
			0x12, 0x0b, 0xf1, 0x90, 0x0e, 0x86, 0x80, 0x09,
			0x90, 0x0e, 0x82, 0x12, 0x0b, 0xf1, 0x90, 0x0e,
			0x80, 0xe4, 0x93, 0xf5, 0x44, 0xa3, 0xe4, 0x93,
			0xf5, 0x43, 0xd2, 0x06, 0x30, 0x06, 0x03, 0xd3,
			0x80, 0x01, 0xc3, 0x92, 0x0e, 0x22, 0xa2, 0xaf,
			0x92, 0x32, 0xc2, 0xaf, 0xe5, 0x23, 0x45, 0x22,
			0x90, 0x0e, 0x5d, 0x60, 0x0e, 0x12, 0x0f, 0xcb,
			0xe0, 0xf5, 0x2c, 0x12, 0x0f, 0xc8, 0xe0, 0xf5,
			0x2d, 0x80, 0x0c, 0x12, 0x0f, 0xcb, 0xe5, 0x30,
			0xf0, 0x12, 0x0f, 0xc8, 0xe5, 0x31, 0xf0, 0xa2,
			0x32, 0x92, 0xaf, 0x22, 0xd2, 0x01, 0xc2, 0x02,
			0xe4, 0xf5, 0x1f, 0xf5, 0x1e, 0xd2, 0x35, 0xd2,
			0x33, 0xd2, 0x36, 0xd2, 0x01, 0xc2, 0x02, 0xf5,
			0x1f, 0xf5, 0x1e, 0xd2, 0x35, 0xd2, 0x33, 0x22,
			0xfb, 0xd3, 0xed, 0x9b, 0x74, 0x80, 0xf8, 0x6c,
			0x98, 0x22, 0x12, 0x06, 0x69, 0xe5, 0x40, 0x2f,
			0xf5, 0x40, 0xe5, 0x3f, 0x3e, 0xf5, 0x3f, 0xe5,
			0x3e, 0x3d, 0xf5, 0x3e, 0xe5, 0x3d, 0x3c, 0xf5,
			0x3d, 0x22, 0xc0, 0xe0, 0xc0, 0x83, 0xc0, 0x82,
			0x90, 0x3f, 0x0d, 0xe0, 0xf5, 0x33, 0xe5, 0x33,
			0xf0, 0xd0, 0x82, 0xd0, 0x83, 0xd0, 0xe0, 0x32,
			0x90, 0x0e, 0x5f, 0xe4, 0x93, 0xfe, 0x74, 0x01,
			0x93, 0xf5, 0x82, 0x8e, 0x83, 0x22, 0x78, 0x7f,
			0xe4, 0xf6, 0xd8, 0xfd, 0x75, 0x81, 0xcd, 0x02,
			0x0c, 0x98, 0x8f, 0x82, 0x8e, 0x83, 0x75, 0xf0,
			0x04, 0xed, 0x02, 0x06, 0xa5,
			},
		.len = 237,
	},
	{
		.reg_base = 0x3022,
		.value = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F,
			},
		.len = 8,
	},
	{
		.reg_base = 0x3000,
		.value = {
			0x00,
			},
		.len = 1,
	},
};

struct OV5640_FIRMWARE_ARRAY ov5640_fw_sunny_caf[] = {

};



static struct reg_tab_wb ov5640_init_req[] = {
	{0x3103, 0x11},
	{0x3008, 0x82},
};

static struct reg_tab_wb ov5640_init_done[] = {
	{0x3008, 0x42},
	{0x3103, 0x03},
	{0x3017, 0x00},
	{0x3018, 0x00},
	{0x3034, 0x18},
	{0x3035, 0x14},
	{0x3036, 0x38},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3630, 0x36},
	{0x3631, 0x0e},
	{0x3632, 0xe2},
	{0x3633, 0x12},
	{0x3621, 0xe0},
	{0x3704, 0xa0},
	{0x3703, 0x5a},
	{0x3715, 0x78},
	{0x3717, 0x01},
	{0x370b, 0x60},
	{0x3705, 0x1a},
	{0x3905, 0x02},
	{0x3906, 0x10},
	{0x3901, 0x0a},
	{0x3731, 0x12},
	{0x3600, 0x08},
	{0x3601, 0x33},
	{0x302d, 0x60},
	{0x3620, 0x52},
	{0x371b, 0x20},
	{0x471c, 0x50},
	{0x3a13, 0x43},
	{0x3a18, 0x00},
	{0x3a19, 0xf8},
	{0x3635, 0x13},
	{0x3636, 0x03},
	{0x3634, 0x40},
	{0x3622, 0x01},
	{0x3c01, 0x34},
	{0x3c04, 0x28},
	{0x3c05, 0x98},
	{0x3c06, 0x00},
	{0x3c07, 0x08},
	{0x3c08, 0x00},
	{0x3c09, 0x1c},
	{0x3c0a, 0x9c},
	{0x3c0b, 0x40},
	{0x3820, 0x41},
	{0x3821, 0x07},
	{0x3814, 0x31},
	{0x3815, 0x31},
	{0x3800, 0x00},
	{0x3801, 0x00},
	{0x3802, 0x00},
	{0x3803, 0x04},
	{0x3804, 0x0a},
	{0x3805, 0x3f},
	{0x3806, 0x07},
	{0x3807, 0x9b},
	{0x3808, 0x02},
	{0x3809, 0x80},
	{0x380a, 0x01},
	{0x380b, 0xe0},
	{0x380c, 0x07},
	{0x380d, 0x68},
	{0x380e, 0x03},
	{0x380f, 0xd8},
	{0x3810, 0x00},
	{0x3811, 0x10},
	{0x3812, 0x00},
	{0x3813, 0x06},
	{0x3618, 0x00},
	{0x3612, 0x29},
	{0x3708, 0x64},
	{0x3709, 0x52},
	{0x370c, 0x03},
	{0x3a02, 0x03},
	{0x3a03, 0xd8},
	{0x3a08, 0x01},
	{0x3a09, 0x27},
	{0x3a0a, 0x00},
	{0x3a0b, 0xf6},
	{0x3a0e, 0x03},
	{0x3a0d, 0x04},
	{0x3a14, 0x03},
	{0x3a15, 0xd8},
	{0x4001, 0x02},
	{0x4004, 0x02},
	{0x3000, 0x00},
	{0x3002, 0x1c},
	{0x3004, 0xff},
	{0x3006, 0xc3},
	{0x300e, 0x45},
	{0x302e, 0x08},
	{0x4300, 0x32},
	{0x501f, 0x00},
	{0x4713, 0x03},
	{0x4407, 0x04},
	{0x440e, 0x00},
	{0x460b, 0x35},
	{0x460c, 0x22},
	/* {0x4837, 0x10},*/  /* 44 */
	{0x4837, 0x20},
	{0x4800, 0x24},	 /* clk high */
	{0x3824, 0x02},
	{0x5000, 0xa7},
	{0x5001, 0xa3},
	{0x5180, 0xff},
	{0x5181, 0xf2},
	{0x5182, 0x00},
	{0x5183, 0x14},
	{0x5184, 0x25},
	{0x5185, 0x24},
	{0x5186, 0x09},
	{0x5187, 0x09},
	{0x5188, 0x09},
	{0x5189, 0x75},
	{0x518a, 0x54},
	{0x518b, 0xe0},
	{0x518c, 0xb2},
	{0x518d, 0x42},
	{0x518e, 0x3d},
	{0x518f, 0x56},
	{0x5190, 0x46},
	{0x5191, 0xf8},
	{0x5192, 0x04},
	{0x5193, 0x70},
	{0x5194, 0xf0},
	{0x5195, 0xf0},
	{0x5196, 0x03},
	{0x5197, 0x01},
	{0x5198, 0x04},
	{0x5199, 0x12},
	{0x519a, 0x04},
	{0x519b, 0x00},
	{0x519c, 0x06},
	{0x519d, 0x82},
	{0x519e, 0x38},
	{0x5381, 0x1e},
	{0x5382, 0x5b},
	{0x5383, 0x08},
	{0x5384, 0x0a},
	{0x5385, 0x7e},
	{0x5386, 0x88},
	{0x5387, 0x7c},
	{0x5388, 0x6c},
	{0x5389, 0x10},
	{0x538a, 0x01},
	{0x538b, 0x98},
	{0x5300, 0x08},
	{0x5301, 0x30},
	{0x5302, 0x10},
	{0x5303, 0x00},
	{0x5304, 0x08},
	{0x5305, 0x30},
	{0x5306, 0x08},
	{0x5307, 0x16},
	{0x5309, 0x08},
	{0x530a, 0x30},
	{0x530b, 0x04},
	{0x530c, 0x06},
	{0x5480, 0x01},
	{0x5481, 0x08},
	{0x5482, 0x14},
	{0x5483, 0x28},
	{0x5484, 0x51},
	{0x5485, 0x65},
	{0x5486, 0x71},
	{0x5487, 0x7d},
	{0x5488, 0x87},
	{0x5489, 0x91},
	{0x548a, 0x9a},
	{0x548b, 0xaa},
	{0x548c, 0xb8},
	{0x548d, 0xcd},
	{0x548e, 0xdd},
	{0x548f, 0xea},
	{0x5490, 0x1d},
	{0x5580, 0x02},
	{0x5583, 0x40},
	{0x5584, 0x10},
	{0x5589, 0x10},
	{0x558a, 0x00},
	{0x558b, 0xf8},
	{0x5800, 0x23},
	{0x5801, 0x14},
	{0x5802, 0x0f},
	{0x5803, 0x0f},
	{0x5804, 0x12},
	{0x5805, 0x26},
	{0x5806, 0x0c},
	{0x5807, 0x08},
	{0x5808, 0x05},
	{0x5809, 0x05},
	{0x580a, 0x08},
	{0x580b, 0x0d},
	{0x580c, 0x08},
	{0x580d, 0x03},
	{0x580e, 0x00},
	{0x580f, 0x00},
	{0x5810, 0x03},
	{0x5811, 0x09},
	{0x5812, 0x07},
	{0x5813, 0x03},
	{0x5814, 0x00},
	{0x5815, 0x01},
	{0x5816, 0x03},
	{0x5817, 0x08},
	{0x5818, 0x0d},
	{0x5819, 0x08},
	{0x581a, 0x05},
	{0x581b, 0x06},
	{0x581c, 0x08},
	{0x581d, 0x0e},
	{0x581e, 0x29},
	{0x581f, 0x17},
	{0x5820, 0x11},
	{0x5821, 0x11},
	{0x5822, 0x15},
	{0x5823, 0x28},
	{0x5824, 0x46},
	{0x5825, 0x26},
	{0x5826, 0x08},
	{0x5827, 0x26},
	{0x5828, 0x64},
	{0x5829, 0x26},
	{0x582a, 0x24},
	{0x582b, 0x22},
	{0x582c, 0x24},
	{0x582d, 0x24},
	{0x582e, 0x06},
	{0x582f, 0x22},
	{0x5830, 0x40},
	{0x5831, 0x42},
	{0x5832, 0x24},
	{0x5833, 0x26},
	{0x5834, 0x24},
	{0x5835, 0x22},
	{0x5836, 0x22},
	{0x5837, 0x26},
	{0x5838, 0x44},
	{0x5839, 0x24},
	{0x583a, 0x26},
	{0x583b, 0x28},
	{0x583c, 0x42},
	{0x583d, 0xce},
	{0x5025, 0x00},
	{0x3a0f, 0x30},
	{0x3a10, 0x28},
	{0x3a1b, 0x30},
	{0x3a1e, 0x26},
	{0x3a11, 0x60},
	{0x3a1f, 0x14},
	{0x4005, 0x1a},
	{0x3008, 0x02},
};



static struct reg_tab_wb ov5640_stm_on[] = {
	{0x4202,	0x00},
};

static struct reg_tab_wb ov5640_stm_off[] = {
	{0x4202,	0x0F},
};



static struct reg_tab_wb ov5640_fmt_yuyv[] = {
	{0x4300,	0x30},
};

static struct reg_tab_wb ov5640_fmt_yvyu[] = {
	{0x4300,	0x31},
};

static struct reg_tab_wb ov5640_fmt_uyvy[] = {
	{0x4300,	0x32},
};

static struct reg_tab_wb ov5640_fmt_vyuy[] = {
	{0x4300,	0x33},
};

static struct reg_tab_wb ov5640_fmt_jpeg[] = {
	{0x3035, 0x12}, /* 11 */
	{0x3036, 0x4e}, /* 14fps */
	{0x3820, 0x40},
	{0x3821, 0x06},
	{0x3814, 0x11},
	{0x3815, 0x11},
	{0x3803, 0x00},
	{0x3807, 0x9f},
	{0x3808, 0x0a},
	{0x3809, 0x20},
	{0x380a, 0x07},
	{0x380b, 0x98},
	{0x380c, 0x0b},
	{0x380d, 0x1c},
	{0x380e, 0x07},
	{0x380f, 0xb0},
	{0x3813, 0x04},
	{0x3618, 0x04},
	{0x3612, 0x2b},
	{0x3708, 0x21},
	{0x3709, 0x12},
	{0x370c, 0x00},
	{0x5001, 0x83},
	{0x4004, 0x06},
	{0x4837, 0x20}, /* 0a */
	{0x4713, 0x02},
	{0x4407, 0x0c},
	{0x460b, 0x37},
	{0x460c, 0x20},
	{0x3824, 0x01},

	/* yuv 2 jpg */
	{0x3821, 0x26},
	{0x3002, 0x00},
	{0x3006, 0xff},
	{0x4713, 0x02},
	{0x3824, 0x04},
};



static struct reg_tab_wb ov5640_wnd_ld[] = {
	{0x3800, 0x0 },	/* sensor x start point (h) */
	{0x3801, 0x0 },	/* sensor x start point (l) */
	{0x3802, 0x0 },	/* sensor y start point (h) */
	{0x3803, 0x4 },	/* sensor y start point (l) */
	{0x3804, 0xA },	/* DVP x input size (h) */
	{0x3805, 0x3F},	/* DVP x input size (l) */
	{0x3806, 0x7 },	/* DVP y input size (h) */
	{0x3807, 0x9B},	/* DVP y input size (l) */
	{0x3810, 0x0 },	/* H Offset */
	{0x3811, 0x10},
	{0x3812, 0x0 },	/* V Offset */
	{0x3813, 0x6 },
	{0x3814, 0x31},
	{0x3815, 0x31},

	{0x3820, 0x41},
	{0x3821, 0x07},
	{0x3618, 0x00},
	{0x3612, 0x29},
	{0x3708, 0x64},
	{0x3709, 0x52},
	{0x370c, 0x03},
	{0x5001, 0xa3},
	{0x4004, 0x02},
	{0x4837, 0x20}, /* 44 */
	{0x4713, 0x03},
	{0x4407, 0x04},
	{0x460b, 0x35},
	{0x460c, 0x22},
	{0x3824, 0x02},
};

/* keep ratio, need fine tune?? */
static struct reg_tab_wb ov5640_wnd_ldw[] = {
	{0x3800, 0x0 },	/* sensor x start point (h) */
	{0x3801, 0x0 },	/* sensor x start point (l) */
	{0x3802, 0x0 },	/* sensor y start point (h) */
	{0x3803, 0x4 },	/* sensor y start point (l) */
	{0x3804, 0xA },	/* DVP x input size (h) */
	{0x3805, 0x3F},	/* DVP x input size (l) */
	{0x3806, 0x7 },	/* DVP y input size (h) */
	{0x3807, 0x9B},	/* DVP y input size (l) */
	{0x3810, 0x0 },	/* H Offset */
	{0x3811, 0x46},
	{0x3812, 0x0 },	/* V Offset */
	{0x3813, 0x6 },
	{0x3814, 0x31},
	{0x3815, 0x31},

	{0x3820, 0x41},
	{0x3821, 0x07},
	{0x3618, 0x00},
	{0x3612, 0x29},
	{0x3708, 0x64},
	{0x3709, 0x52},
	{0x370c, 0x03},
	{0x5001, 0xa3},
	{0x4004, 0x02},
	{0x4837, 0x20}, /* 44 */
	{0x4713, 0x03},
	{0x4407, 0x04},
	{0x460b, 0x35},
	{0x460c, 0x22},
	{0x3824, 0x02},
};

static struct reg_tab_wb ov5640_wnd_hd[] = {
	{0x3017, 0x00},
	{0x3018, 0x00},
	{0x3034, 0x18},
	{0x3035, 0x11},
	{0x3036, 0x54},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3630, 0x36},
	{0x3631, 0x0e},
	{0x3632, 0xe2},
	{0x3633, 0x12},
	{0x3621, 0xe0},
	{0x3704, 0xa0},
	{0x3703, 0x5a},
	{0x3715, 0x78},
	{0x3717, 0x01},
	{0x370b, 0x60},
	{0x3705, 0x1a},
	{0x3905, 0x02},
	{0x3906, 0x10},
	{0x3901, 0x0a},
	{0x3731, 0x12},
	{0x3600, 0x08},
	{0x3601, 0x33},
	{0x302d, 0x60},
	{0x3620, 0x52},
	{0x371b, 0x20},
	{0x471c, 0x50},
	{0x3a13, 0x43},
	{0x3a18, 0x00},
	{0x3a19, 0xf8},
	{0x3635, 0x13},
	{0x3636, 0x03},
	{0x3634, 0x40},
	{0x3622, 0x01},
	{0x3c01, 0x34},
	{0x3c04, 0x28},
	{0x3c05, 0x98},
	{0x3c06, 0x00},
	{0x3c07, 0x07},
	{0x3c08, 0x00},
	{0x3c09, 0x1c},
	{0x3c0a, 0x9c},
	{0x3c0b, 0x40},
	{0x3820, 0x41},
	{0x3821, 0x07},
	{0x3814, 0x31},
	{0x3815, 0x31},
	{0x3800, 0x00},
	{0x3801, 0x00},
	{0x3802, 0x00},
	{0x3803, 0xfa},
	{0x3804, 0x0a},
	{0x3805, 0x3f},
	{0x3806, 0x06},
	{0x3807, 0xa9},
	{0x3810, 0x00},
	{0x3811, 0x10},
	{0x3812, 0x00},
	{0x3813, 0x04},
	{0x3618, 0x00},
	{0x3612, 0x29},
	{0x3708, 0x64},
	{0x3709, 0x52},
	{0x370c, 0x03},
	{0x3a02, 0x02},
	{0x3a03, 0xe4},
	{0x3a08, 0x01},
	{0x3a09, 0xbc},
	{0x3a0a, 0x01},
	{0x3a0b, 0x72},
	{0x3a0e, 0x01},
	{0x3a0d, 0x02},
	{0x3a14, 0x02},
	{0x3a15, 0xe4},
	{0x4001, 0x02},
	{0x4004, 0x02},
	{0x3000, 0x00},
	{0x3002, 0x1c},
	{0x3004, 0xff},
	{0x3006, 0xc3},
	{0x300e, 0x45},
	{0x302e, 0x08},
	{0x4300, 0x32},
	{0x501f, 0x00},
	{0x4713, 0x02},
	{0x4407, 0x04},
	{0x440e, 0x00},
	{0x460b, 0x37},
	{0x460c, 0x20},
	{0x4837, 0x0a},
	{0x4800, 0x24},
	{0x3824, 0x04},
	{0x5000, 0xa7},
	{0x5001, 0x83},
};

static struct reg_tab_wb ov5640_wnd_1080p[] = {
	{0x3017, 0x00},
	{0x3018, 0x00},
	{0x3034, 0x18},
	{0x3035, 0x11},
	{0x3036, 0x54},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3630, 0x36},
	{0x3631, 0x0e},
	{0x3632, 0xe2},
	{0x3633, 0x12},
	{0x3621, 0xe0},
	{0x3704, 0xa0},
	{0x3703, 0x5a},
	{0x3715, 0x78},
	{0x3717, 0x01},
	{0x370b, 0x60},
	{0x3705, 0x1a},
	{0x3905, 0x02},
	{0x3906, 0x10},
	{0x3901, 0x0a},
	{0x3731, 0x12},
	{0x3600, 0x08},
	{0x3601, 0x33},
	{0x302d, 0x60},
	{0x3620, 0x52},
	{0x371b, 0x20},
	{0x471c, 0x50},
	{0x3a13, 0x43},
	{0x3a18, 0x00},
	{0x3a19, 0xf8},
	{0x3635, 0x13},
	{0x3636, 0x03},
	{0x3634, 0x40},
	{0x3622, 0x01},
	{0x3c01, 0x34},
	{0x3c04, 0x28},
	{0x3c05, 0x98},
	{0x3c06, 0x00},
	{0x3c07, 0x07},
	{0x3c08, 0x00},
	{0x3c09, 0x1c},
	{0x3c0a, 0x9c},
	{0x3c0b, 0x40},
	{0x3820, 0x40},
	{0x3821, 0x06},
	{0x3814, 0x11},
	{0x3815, 0x11},
	{0x3800, 0x01},
	{0x3801, 0x50},
	{0x3802, 0x01},
	{0x3803, 0xb2},
	{0x3804, 0x08},
	{0x3805, 0xef},
	{0x3806, 0x05},
	{0x3807, 0xf1},
	{0x3810, 0x00},
	{0x3811, 0x10},
	{0x3812, 0x00},
	{0x3813, 0x04},
	{0x3618, 0x04},
	{0x3612, 0x2b},
	{0x3708, 0x64},
	{0x3709, 0x12},
	{0x370c, 0x00},
	{0x3a02, 0x04},
	{0x3a03, 0x60},
	{0x3a08, 0x01},
	{0x3a09, 0x50},
	{0x3a0a, 0x01},
	{0x3a0b, 0x18},
	{0x3a0e, 0x03},
	{0x3a0d, 0x04},
	{0x3a14, 0x04},
	{0x3a15, 0x60},
	{0x4001, 0x02},
	{0x4004, 0x06},
	{0x3000, 0x00},
	{0x3002, 0x1c},
	{0x3004, 0xff},
	{0x3006, 0xc3},
	{0x300e, 0x45},
	{0x302e, 0x08},
	{0x4300, 0x32},
	{0x501f, 0x00},
	{0x4713, 0x02},
	{0x4407, 0x04},
	{0x440e, 0x00},
	{0x460b, 0x37},
	{0x460c, 0x20},
	{0x4837, 0x0a},
	{0x4800, 0x24},
	{0x3824, 0x04},
	{0x5000, 0xa7},
	{0x5001, 0x83},
};

static struct reg_tab_wb ov5640_wnd_5m[] = {
	{0x3800, 0x0 },	/* sensor x start point (h) */
	{0x3801, 0x0 },	/* sensor x start point (l) */
	{0x3802, 0x0 },	/* sensor y start point (h) */
	{0x3803, 0x4 },	/* sensor y start point (l) */
	{0x3804, 0xA },	/* DVP x input size (h) */
	{0x3805, 0x3F},	/* DVP x input size (l) */
	{0x3806, 0x7 },	/* DVP y input size (h) */
	{0x3807, 0x9B},	/* DVP y input size (l) */
	{0x3810, 0x0 },	/* H Offset */
	{0x3811, 0x10},
	{0x3812, 0x0 },	/* V Offset */
	{0x3813, 0x6 },
	{0x3814, 0x11},
	{0x3815, 0x11},

	{0x3820, 0x40},
	{0x3821, 0x06},
	{0x3803, 0x00},
	{0x3807, 0x9f},
	{0x3813, 0x04},
	{0x3618, 0x04},
	{0x3612, 0x2b},
	{0x3708, 0x21},
	{0x3709, 0x12},
	{0x370c, 0x00},
	{0x5001, 0x83},
	{0x4004, 0x06},
	{0x4837, 0x0a},
	{0x4713, 0x02},
	{0x4407, 0x0c},
	{0x460b, 0x37},
};

static struct reg_tab_wb ov5640_wnd_full[] = {
	{ISP_INPUT_X_SZ_H,	0x0A},
	{ISP_INPUT_X_SZ_L,	0x3F},
	{ISP_INPUT_Y_SZ_H,	0x07},
	{ISP_INPUT_Y_SZ_L,	0x9B},
};



static struct reg_tab_wb ov5640_res_qcif[] = {
	{ISP_OUTPUT_X_SZ_H,	0x00},
	{ISP_OUTPUT_X_SZ_L,	0xB0},
	{ISP_OUTPUT_Y_SZ_H,	0x00},
	{ISP_OUTPUT_Y_SZ_L,	0x90},
	{ISP_OUTPUT_X_TSZ_H,	0x07},
	{ISP_OUTPUT_X_TSZ_L,	0x68},
	{ISP_OUTPUT_Y_TSZ_H,	0x03},
	{ISP_OUTPUT_Y_TSZ_L,	0xD8},
};

static struct reg_tab_wb ov5640_res_cif[] = {
	{ISP_OUTPUT_X_SZ_H,	0x01},
	{ISP_OUTPUT_X_SZ_L,	0x60},
	{ISP_OUTPUT_Y_SZ_H,	0x01},
	{ISP_OUTPUT_Y_SZ_L,	0x20},
	{ISP_OUTPUT_X_TSZ_H,	0x07},
	{ISP_OUTPUT_X_TSZ_L,	0x68},
	{ISP_OUTPUT_Y_TSZ_H,	0x03},
	{ISP_OUTPUT_Y_TSZ_L,	0xD8},
};

static struct reg_tab_wb ov5640_res_hqvga[] = {
	{ISP_OUTPUT_X_SZ_H,	0x00},
	{ISP_OUTPUT_X_SZ_L,	0xF0},
	{ISP_OUTPUT_Y_SZ_H,	0x00},
	{ISP_OUTPUT_Y_SZ_L,	0xA0},
	{ISP_OUTPUT_X_TSZ_H,	0x07},
	{ISP_OUTPUT_X_TSZ_L,	0x68},
	{ISP_OUTPUT_Y_TSZ_H,	0x03},
	{ISP_OUTPUT_Y_TSZ_L,	0xD8},
};

static struct reg_tab_wb ov5640_res_qvga[] = {
	{ISP_OUTPUT_X_SZ_H,	0x01},
	{ISP_OUTPUT_X_SZ_L,	0x40},
	{ISP_OUTPUT_Y_SZ_H,	0x00},
	{ISP_OUTPUT_Y_SZ_L,	0xF0},
	{ISP_OUTPUT_X_TSZ_H,	0x07},
	{ISP_OUTPUT_X_TSZ_L,	0x68},
	{ISP_OUTPUT_Y_TSZ_H,	0x03},
	{ISP_OUTPUT_Y_TSZ_L,	0xD8},
};

static struct reg_tab_wb ov5640_res_vga[] = {
	{ISP_OUTPUT_X_SZ_H,	0x02},
	{ISP_OUTPUT_X_SZ_L,	0x80},
	{ISP_OUTPUT_Y_SZ_H,	0x01},
	{ISP_OUTPUT_Y_SZ_L,	0xE0},
	{ISP_OUTPUT_X_TSZ_H,	0x07},
	{ISP_OUTPUT_X_TSZ_L,	0x68},
	{ISP_OUTPUT_Y_TSZ_H,	0x03},
	{ISP_OUTPUT_Y_TSZ_L,	0xD8},
};

static struct reg_tab_wb ov5640_res_wvga[] = {
	{ISP_OUTPUT_X_SZ_H,	0x03},
	{ISP_OUTPUT_X_SZ_L,	0x20},
	{ISP_OUTPUT_Y_SZ_H,	0x01},
	{ISP_OUTPUT_Y_SZ_L,	0xE0},
	{ISP_OUTPUT_X_TSZ_H,	0x07},
	{ISP_OUTPUT_X_TSZ_L,	0x68},
	{ISP_OUTPUT_Y_TSZ_H,	0x03},
	{ISP_OUTPUT_Y_TSZ_L,	0xD8},
};

static struct reg_tab_wb ov5640_res_d1[] = {
	{ISP_OUTPUT_X_SZ_H,	0x02},
	{ISP_OUTPUT_X_SZ_L,	0xD0},
	{ISP_OUTPUT_Y_SZ_H,	0x01},
	{ISP_OUTPUT_Y_SZ_L,	0xE9},
	{ISP_OUTPUT_X_TSZ_H,	0x07},
	{ISP_OUTPUT_X_TSZ_L,	0x68},
	{ISP_OUTPUT_Y_TSZ_H,	0x03},
	{ISP_OUTPUT_Y_TSZ_L,	0xD8},
};

static struct reg_tab_wb ov5640_res_720p[] = {
	{ISP_OUTPUT_X_SZ_H,	0x05},
	{ISP_OUTPUT_X_SZ_L,	0x00},
	{ISP_OUTPUT_Y_SZ_H,	0x02},
	{ISP_OUTPUT_Y_SZ_L,	0xD0},
	{ISP_OUTPUT_X_TSZ_H,	0x08},
	{ISP_OUTPUT_X_TSZ_L,	0x00},
	{ISP_OUTPUT_Y_TSZ_H,	0x02},
	{ISP_OUTPUT_Y_TSZ_L,	0xE4},
};

static struct reg_tab_wb ov5640_res_1080p[] = {
	{ISP_OUTPUT_X_SZ_H,	0x07},
	{ISP_OUTPUT_X_SZ_L,	0x80},
	{ISP_OUTPUT_Y_SZ_H,	0x04},
	{ISP_OUTPUT_Y_SZ_L,	0x38},
	{ISP_OUTPUT_X_TSZ_H,	0x09},
	{ISP_OUTPUT_X_TSZ_L,	0xC4},
	{ISP_OUTPUT_Y_TSZ_H,	0x04},
	{ISP_OUTPUT_Y_TSZ_L,	0x60},
};

static struct reg_tab_wb ov5640_res_3m[] = {
	{ISP_OUTPUT_X_SZ_H,	0x08},
	{ISP_OUTPUT_X_SZ_L,	0x00},
	{ISP_OUTPUT_Y_SZ_H,	0x06},
	{ISP_OUTPUT_Y_SZ_L,	0x00},
	{ISP_OUTPUT_X_TSZ_H,	0x0B},
	{ISP_OUTPUT_X_TSZ_L,	0x1C},
	{ISP_OUTPUT_Y_TSZ_H,	0x07},
	{ISP_OUTPUT_Y_TSZ_L,	0xB0},
};

static struct reg_tab_wb ov5640_res_5m[] = {
	{ISP_OUTPUT_X_SZ_H,	0x0A},
	{ISP_OUTPUT_X_SZ_L,	0x20},
	{ISP_OUTPUT_Y_SZ_H,	0x07},
	{ISP_OUTPUT_Y_SZ_L,	0x98},
	{ISP_OUTPUT_X_TSZ_H,	0x0B},
	{ISP_OUTPUT_X_TSZ_L,	0x1C},
	{ISP_OUTPUT_Y_TSZ_H,	0x07},
	{ISP_OUTPUT_Y_TSZ_L,	0xB0},
};



/* 2lane mipi setting */
static __attribute__((unused)) struct reg_tab_wb ov5640_mipi_2l_ld[] = {
	{0x3034, 0x18},
	{0x3035, 0x14},
	{0x3036, 0x38},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3824, 0x02},
	{0x460c, 0x22},
	{0x300e, 0x45},
	{0x4827, 0x32},	/* HS_PREPARE */
	{0x4819, 0x96},	/* HS_ZERO */
	{0x481f, 0x3c},	/* CLK_PREPARE */
};

static __attribute__((unused)) struct reg_tab_wb ov5640_mipi_2l_720p[] = {
	{0x3034, 0x18},
	{0x3035, 0x21},
	{0x3036, 0x54},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3824, 0x04},
	{0x460c, 0x20},
	{0x300e, 0x45},
	{0x4827, 0x32},	/* HS_PREPARE */
	{0x4819, 0x96},	/* HS_ZERO */
	{0x481f, 0x3c},	/* CLK_PREPARE */
};

static __attribute__((unused)) struct reg_tab_wb ov5640_mipi_2l_1080p[] = {
	{0x3034, 0x18},
	{0x3035, 0x11},
	{0x3036, 0x54},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3824, 0x04},
	{0x460c, 0x20},
	{0x300e, 0x45},
	{0x4827, 0x32},	/* HS_PREPARE */
	{0x4819, 0x96},	/* HS_ZERO */
	{0x481f, 0x3c},	/* CLK_PREPARE */
};

static __attribute__((unused)) struct reg_tab_wb ov5640_mipi_2l_5m[] = {
	{0x3034, 0x18},
	{0x3035, 0x11},
	{0x3036, 0x4E},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3824, 0x01},
	{0x460c, 0x20},
	{0x300e, 0x45},
	{0x4827, 0x32},	/* HS_PREPARE */
	{0x4819, 0x96},	/* HS_ZERO */
	{0x481f, 0x3c},	/* CLK_PREPARE */
};

static __attribute__((unused)) struct reg_tab_wb ov5640_mipi_2l_jpg[] = {
	{0x3034, 0x18},
	{0x3035, 0x12},
	{0x3036, 0x4E},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3824, 0x04},
	{0x460c, 0x20},
	{0x300e, 0x45},
	{0x4827, 0x64},	/* HS_PREPARE */
	{0x4819, 0xff},	/* HS_ZERO */
	{0x481f, 0x50},	/* CLK_PREPARE */
};

/* 2lane mipi setting, based on 24MHz MCLK */
static __attribute__((unused)) struct reg_tab_wb ov5640_mipi_24m_ld[] = {
	{0x3034, 0x18},
	{0x3035, 0x14},
	{0x3036, 0x38},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3824, 0x02},
	{0x460c, 0x22},
	{0x300e, 0x45},
	{0x4827, 0x32},	/* HS_PREPARE */
	{0x4819, 0x96},	/* HS_ZERO */
	{0x481f, 0x3c},	/* CLK_PREPARE */
};

static __attribute__((unused)) struct reg_tab_wb ov5640_mipi_24m_720p[] = {
	{0x3034, 0x18},
	{0x3035, 0x21},
	{0x3036, 0x5C},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3824, 0x04},
	{0x460c, 0x20},
	{0x300e, 0x45},
	{0x4827, 0x32},	/* HS_PREPARE */
	{0x4819, 0x96},	/* HS_ZERO */
	{0x481f, 0x3c},	/* CLK_PREPARE */
};

static __attribute__((unused)) struct reg_tab_wb ov5640_mipi_24m_1080p[] = {
	{0x3034, 0x18},
	{0x3035, 0x11},
	{0x3036, 0x54},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3824, 0x04},
	{0x460c, 0x20},
	{0x300e, 0x45},
	{0x4827, 0x32},	/* HS_PREPARE */
	{0x4819, 0x96},	/* HS_ZERO */
	{0x481f, 0x3c},	/* CLK_PREPARE */
};

static __attribute__((unused)) struct reg_tab_wb ov5640_mipi_24m_5m[] = {
	{0x3034, 0x18},
	{0x3035, 0x11},
	{0x3036, 0x4E},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3824, 0x01},
	{0x460c, 0x20},
	{0x300e, 0x45},
	{0x4827, 0x32},	/* HS_PREPARE */
	{0x4819, 0x96},	/* HS_ZERO */
	{0x481f, 0x3c},	/* CLK_PREPARE */
};

static __attribute__((unused)) struct reg_tab_wb ov5640_mipi_24m_jpg[] = {
	{0x3034, 0x18},
	{0x3035, 0x12},
	{0x3036, 0x4E},
	{0x3037, 0x13},
	{0x3108, 0x01},
	{0x3824, 0x04},
	{0x460c, 0x20},
	{0x300e, 0x45},
	{0x4827, 0x64},	/* HS_PREPARE */
	{0x4819, 0xff},	/* HS_ZERO */
	{0x481f, 0x50},	/* CLK_PREPARE */
};

/**************************** register section end ****************************/

enum {
	OV5640_PROP_FW	= 0,		/* Reset / Firmware */
	OV5640_PROP_INIT,		/* Initialize sequence */
	OV5640_PROP_STM,		/* Stream on/off */
	OV5640_PROP_FMT,		/* Output format */
	OV5640_PROP_WND,		/* Internal windowing */
	OV5640_PROP_RES,		/* Output resolution */
	OV5640_PROP_IF,		/* Interface behavior: a sensor output should be
				 * either MIPI or DVP, so MIPI and DVP share the
				 * same property ID */
	OV5640_PROP_MIPI = OV5640_PROP_IF,	/* MIPI interface behavior */
	OV5640_PROP_DVP = OV5640_PROP_IF,	/* DVP interface behavior */
	OV5640_PROP_END,
};

enum {	/* all register */
	OV5640_FW_SUNNY,	/* Load SUNNY firmware */
	OV5640_FW_SUNNY_CAF,	/* Load SUNNY firmware, support continuous AF */
	OV5640_FW_END,	/* don't use it*/
};

enum {	/* all register */
	OV5640_INIT_REQ	= 0,
	OV5640_INIT_DONE,
	OV5640_INIT_END,	/* don't use it*/
};

enum {	/* 0x4200~0x42FF */
	OV5640_STM_OFF	= 0,
	OV5640_STM_ON,
	OV5640_STM_END,	/* don't use it*/
};

enum {	/* 0x4300~0x46FF */
	OV5640_FMT_YUYV	= 0,
	OV5640_FMT_YVYU,
	OV5640_FMT_UYVY,
	OV5640_FMT_VYUY,
	OV5640_FMT_JPEG,
	OV5640_FMT_END,	/* don't use it*/
};

enum {	/* 0x3800~0x38FF */
	OV5640_WND_LD	= 0,
	OV5640_WND_LDW,
	OV5640_WND_HD,
	OV5640_WND_FULL,
	OV5640_WND_1080P,
	OV5640_WND_5M,
	OV5640_WND_END,	/* don't use it*/
};

enum {	/* 0x3808~0x380F */
	OV5640_RES_QCIF = 0,
	OV5640_RES_HQVGA,
	OV5640_RES_QVGA,
	OV5640_RES_CIF,
	OV5640_RES_VGA,
	OV5640_RES_D1,
	OV5640_RES_WVGA,
	OV5640_RES_720P,
	OV5640_RES_1080P,
	OV5640_RES_3M,
	OV5640_RES_5M,
	OV5640_RES_END,	/* don't use it*/
};

enum {	/* 0x4800~0x48FF */
	OV5640_IF_LD	= 0,
	OV5640_IF_JPG,
	OV5640_IF_720P,
	OV5640_IF_1080P,
	OV5640_IF_5M,
	OV5640_IF_END,

	OV5640_MIPI_2L_LD	= OV5640_IF_LD,
	OV5640_MIPI_2L_JPG	= OV5640_IF_JPG,
	OV5640_MIPI_2L_720P	= OV5640_IF_720P,
	OV5640_MIPI_2L_1080P	= OV5640_IF_1080P,
	OV5640_MIPI_2L_5M	= OV5640_IF_5M,
	OV5640_MIPI_2L_END	= OV5640_IF_END,	/* don't use it*/
};

enum {	/* 0x4800~0x48FF */
	OV5640_ST_INVALID	= 0, /* place holder, don't use 0 as state id*/
	OV5640_ST_UYVY_QCIF,
	OV5640_ST_UYVY_CIF,
	OV5640_ST_UYVY_HQVGA,
	OV5640_ST_UYVY_QVGA,
	OV5640_ST_UYVY_VGA,
	OV5640_ST_UYVY_WVGA,
	OV5640_ST_UYVY_D1,
	OV5640_ST_UYVY_720P,
	OV5640_ST_UYVY_1080P,
	OV5640_ST_UYVY_5M,
	OV5640_ST_JPEG_QVGA,
	OV5640_ST_JPEG_VGA,
	OV5640_ST_JPEG_3M,
	OV5640_ST_JPEG_5M,
	OV5640_ST_END,	/* don't use it*/
};

static struct ecs_default_fmt_info ov5640_fmt_info_table[] = {
	[OV5640_FMT_YUYV] = {
		.code	= V4L2_MBUS_FMT_YUYV8_2X8,
		.clrspc	= V4L2_COLORSPACE_JPEG,
		.fourcc	= V4L2_PIX_FMT_YUYV,
	},
	[OV5640_FMT_YVYU] = {
		.code	= V4L2_MBUS_FMT_YVYU8_2X8,
		.clrspc	= V4L2_COLORSPACE_JPEG,
		.fourcc	= V4L2_PIX_FMT_YVYU,
	},
	[OV5640_FMT_UYVY] = {
		.code	= V4L2_MBUS_FMT_UYVY8_2X8,
		.clrspc	= V4L2_COLORSPACE_JPEG,
		.fourcc	= V4L2_PIX_FMT_UYVY,
	},
	[OV5640_FMT_VYUY] = {
		.code	= V4L2_MBUS_FMT_VYUY8_2X8,
		.clrspc	= V4L2_COLORSPACE_JPEG,
		.fourcc	= V4L2_PIX_FMT_VYUY,
	},
	[OV5640_FMT_JPEG] = {
		.code	= V4L2_MBUS_FMT_JPEG_1X8,
		.clrspc	= V4L2_COLORSPACE_JPEG,
		.fourcc	= V4L2_PIX_FMT_JPEG,
	},
};

static struct ecs_default_res_info ov5640_res_info_table[] = {
	[OV5640_RES_QCIF] = {
		.h_act = 176,
		.v_act = 144,
	},
	[OV5640_RES_HQVGA] = {
		.h_act = 240,
		.v_act = 160,
	},
	[OV5640_RES_QVGA] = {
		.h_act = 320,
		.v_act = 240,
	},
	[OV5640_RES_CIF] = {
		.h_act = 352,
		.v_act = 288,
	},
	[OV5640_RES_VGA] = {
		.h_act = 640,
		.v_act = 480,
	},
	[OV5640_RES_D1] = {
		.h_act = 720,
		.v_act = 480,
	},
	[OV5640_RES_WVGA] = {
		.h_act = 800,
		.v_act = 480,
	},
	[OV5640_RES_720P] = {
		.h_act = 1280,
		.v_act = 720,
	},
	[OV5640_RES_1080P] = {
		.h_act = 1920,
		.v_act = 1080,
	},
	[OV5640_RES_3M] = {
		.h_act = 2048,
		.v_act = 1536,
	},
	[OV5640_RES_5M] = {
		.h_act = 2592,
		.v_act = 1944,
	},
};
#ifdef CONFIG_PXA95x
static struct mipi_phy ov5640_mipi_2l_info_table[] = {
	[OV5640_MIPI_2L_LD] = { /* Controller config for low defination YUV */
		.cl_termen = 0x00,
		.cl_settle = 0x04,
		.hs_termen = 0x05,
		.hs_settle = 0x09,
		.hs_rx_to = 0xFFFF,
		.lane = 2,
	},
	[OV5640_MIPI_2L_JPG] = { /* For all JPEGs */
		.cl_termen = 0x00,
		.cl_settle = 0x04,
		.hs_termen = 0x05,
		.hs_settle = 0x09,
		.hs_rx_to = 0xFFFF,
		.lane = 2,
	},
	[OV5640_MIPI_2L_720P] = { /* For 720p */
		.cl_termen = 0x00,
		.cl_settle = 0x04,
		.hs_termen = 0x07,
		.hs_settle = 0x0D,
		.hs_rx_to = 0xFFFF,
		.lane = 2,
	},
	[OV5640_MIPI_2L_1080P] = { /* For 1080p */
		.cl_termen = 0x00,
		.cl_settle = 0x04,
		.hs_termen = 0x0F,
		.hs_settle = 0x19,
		.hs_rx_to = 0xFFFF,
		.lane = 2,
	},
	[OV5640_MIPI_2L_5M] = { /* For 5M */
		.cl_termen = 0x00,
		.cl_settle = 0x04,
		.hs_termen = 0x07,
		.hs_settle = 0x0F,
		.hs_rx_to = 0xFFFF,
		.lane = 2,
	},
};
#else
static struct csi_dphy_desc ov5640_mipi_24m_info_table[] = {
	[OV5640_MIPI_2L_LD] = { /* Controller config for low defination YUV */
		.clk_mul	= 32,
		.clk_div	= 4,
		.hs_prepare	= 27,	/* time count in clock period */
		.hs_zero	= 53,	/* time count in clock period */
		.nr_lane	= 2,
	},
	[OV5640_MIPI_2L_JPG] = { /* For all JPEGs */
		.clk_mul	= 32,
		.clk_div	= 4,
		.hs_prepare	= 27,	/* time count in clock period */
		.hs_zero	= 53,	/* time count in clock period */
		.nr_lane	= 2,
	},
	[OV5640_MIPI_2L_720P] = { /* For 720p */
		.clk_mul	= 32,
		.clk_div	= 4,
		.hs_prepare	= 27,	/* time count in clock period */
		.hs_zero	= 53,	/* time count in clock period */
		.nr_lane	= 2,
	},
	[OV5640_MIPI_2L_1080P] = { /* For 1080p */
		.clk_mul	= 32,
		.clk_div	= 4,
		.hs_prepare	= 27,	/* time count in clock period */
		.hs_zero	= 53,	/* time count in clock period */
		.nr_lane	= 2,
	},
	[OV5640_MIPI_2L_5M] = { /* For 5M */
		.clk_mul	= 32,
		.clk_div	= 4,
		.hs_prepare	= 27,	/* time count in clock period */
		.hs_zero	= 53,	/* time count in clock period */
		.nr_lane	= 2,
	},
};
#endif

#define OV5640_DECLARE_FW_SETTING(VAL, val) \
	__DECLARE_SETTING(OV5640, ov5640, FW, fw, VAL, val)
static struct ecs_setting ov5640_fw_stn_table[OV5640_FW_END] = {
	OV5640_DECLARE_FW_SETTING(SUNNY, sunny),
	OV5640_DECLARE_FW_SETTING(SUNNY_CAF, sunny_caf),
};

#define OV5640_DECLARE_INIT_SETTING(VAL, val) \
	__DECLARE_SETTING(OV5640, ov5640, INIT, init, VAL, val)
static struct ecs_setting ov5640_init_stn_table[OV5640_INIT_END] = {
	OV5640_DECLARE_INIT_SETTING(REQ, req),
	OV5640_DECLARE_INIT_SETTING(DONE, done),
};

#define OV5640_DECLARE_STM_SETTING(VAL, val) \
	__DECLARE_SETTING(OV5640, ov5640, STM, stm, VAL, val)
static struct ecs_setting ov5640_stm_stn_table[OV5640_STM_END] = {
	OV5640_DECLARE_STM_SETTING(OFF, off),
	OV5640_DECLARE_STM_SETTING(ON, on),
};

#define OV5640_DECLARE_FMT_SETTING(VAL, val) \
	__DECLARE_SETTING_VS_INFO(OV5640, ov5640, FMT, fmt, VAL, val)
static struct ecs_setting ov5640_fmt_stn_table[OV5640_FMT_END] = {
	OV5640_DECLARE_FMT_SETTING(YUYV, yuyv),
	OV5640_DECLARE_FMT_SETTING(YVYU, yvyu),
	OV5640_DECLARE_FMT_SETTING(UYVY, uyvy),
	OV5640_DECLARE_FMT_SETTING(VYUY, vyuy),
	OV5640_DECLARE_FMT_SETTING(JPEG, jpeg),
};

#define OV5640_DECLARE_RES_SETTING(VAL, val) \
	__DECLARE_SETTING_VS_INFO(OV5640, ov5640, RES, res, VAL, val)
static struct ecs_setting ov5640_res_stn_table[OV5640_RES_END] = {
	OV5640_DECLARE_RES_SETTING(QCIF, qcif),
	OV5640_DECLARE_RES_SETTING(HQVGA, hqvga),
	OV5640_DECLARE_RES_SETTING(QVGA, qvga),
	OV5640_DECLARE_RES_SETTING(CIF,	cif),
	OV5640_DECLARE_RES_SETTING(VGA, vga),
	OV5640_DECLARE_RES_SETTING(D1, d1),
	OV5640_DECLARE_RES_SETTING(WVGA, wvga),
	OV5640_DECLARE_RES_SETTING(720P, 720p),
	OV5640_DECLARE_RES_SETTING(1080P, 1080p),
	OV5640_DECLARE_RES_SETTING(3M, 3m),
	OV5640_DECLARE_RES_SETTING(5M, 5m),
};

#define OV5640_DECLARE_WND_SETTING(VAL, val) \
	__DECLARE_SETTING(OV5640, ov5640, WND, wnd, VAL, val)
static struct ecs_setting ov5640_wnd_stn_table[OV5640_WND_END] = {
	OV5640_DECLARE_WND_SETTING(LD, ld),
	OV5640_DECLARE_WND_SETTING(LDW, ldw),
	OV5640_DECLARE_WND_SETTING(HD, hd),
	OV5640_DECLARE_WND_SETTING(FULL, full),
	OV5640_DECLARE_WND_SETTING(1080P, 1080p),
	OV5640_DECLARE_WND_SETTING(5M, 5m),
};

#ifdef CONFIG_PXA95x

#define OV5640_DECLARE_MIPI_SETTING(VAL, val) \
	__DECLARE_SETTING_VS_INFO(OV5640, ov5640, MIPI_2L, mipi_2l, VAL, val)
static struct ecs_setting ov5640_mipi_2l_stn_table[OV5640_MIPI_2L_END] = {
	OV5640_DECLARE_MIPI_SETTING(LD, ld),
	OV5640_DECLARE_MIPI_SETTING(JPG, jpg),
	OV5640_DECLARE_MIPI_SETTING(720P, 720p),
	OV5640_DECLARE_MIPI_SETTING(1080P, 1080p),
	OV5640_DECLARE_MIPI_SETTING(5M, 5m),
};

#else

#define OV5640_DECLARE_MIPI_24M_SETTING(VAL, val) \
	__DECLARE_SETTING_VS_INFO(OV5640, ov5640, MIPI_2L, mipi_24m, VAL, val)
static struct ecs_setting ov5640_mipi_2l_stn_table[OV5640_MIPI_2L_END] = {
	OV5640_DECLARE_MIPI_24M_SETTING(LD, ld),
	OV5640_DECLARE_MIPI_24M_SETTING(JPG, jpg),
	OV5640_DECLARE_MIPI_24M_SETTING(720P, 720p),
	OV5640_DECLARE_MIPI_24M_SETTING(1080P, 1080p),
	OV5640_DECLARE_MIPI_24M_SETTING(5M, 5m),
};
#endif

static struct ecs_property ov5640_property_table[OV5640_PROP_END] = {
	[OV5640_PROP_FW] = {
		.name		= "FIRMWARE",
		.id		= OV5640_PROP_FW,
		.stn_tab	= ov5640_fw_stn_table,
		.stn_num	= OV5640_FW_END,
		.reg_low	= OV5640_RESET_ADDR,
		.reg_high	= OV5640_RESET_ADDR+1,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= ov5640_firmware_download,
	},
	[OV5640_PROP_INIT] = {
		.name		= "INITIALIZE",
		.id		= OV5640_PROP_INIT,
		.stn_tab	= ov5640_init_stn_table,
		.stn_num	= OV5640_INIT_END,
		.reg_low	= 0,
		.reg_high	= 0,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
	[OV5640_PROP_STM] = {
		.name		= "STREAM",
		.id		= OV5640_PROP_STM,
		.stn_tab	= ov5640_stm_stn_table,
		.stn_num	= OV5640_STM_END,
		.reg_low	= 0x4200,
		.reg_high	= 0x4300,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
	[OV5640_PROP_FMT] = {
		.name		= "FORMAT",
		.id		= OV5640_PROP_FMT,
		.stn_tab	= ov5640_fmt_stn_table,
		.stn_num	= OV5640_FMT_END,
		.reg_low	= 0x4300,
		.reg_high	= 0x4700,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
	[OV5640_PROP_RES] = {
		.name		= "RESOLUTION",
		.id		= OV5640_PROP_RES,
		.stn_tab	= ov5640_res_stn_table,
		.stn_num	= OV5640_RES_END,
		.reg_low	= 0x3808,
		.reg_high	= 0x3810,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
	[OV5640_PROP_WND] = {
		.name		= "WINDOWING",
		.id		= OV5640_PROP_WND,
		.stn_tab	= ov5640_wnd_stn_table,
		.stn_num	= OV5640_WND_END,
		.reg_low	= 0x3800,
		.reg_high	= 0x3900,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
	[OV5640_PROP_IF] = {
		.name		= "INTERFACE",
		.id		= OV5640_PROP_IF,
		.stn_tab	= NULL,
		.stn_num	= OV5640_IF_END,
		.reg_low	= 0x4800,
		.reg_high	= 0x4900,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
};

/*********************************** state ***********************************/
/* Default global init sequence */
static struct ecs_state_cfg ov5640_state_uyvy_qcif[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_UYVY},
	{OV5640_PROP_WND,	OV5640_WND_LD},
	{OV5640_PROP_RES,	OV5640_RES_QCIF},
	{OV5640_PROP_IF,	OV5640_IF_LD},
};

static struct ecs_state_cfg ov5640_state_uyvy_cif[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_UYVY},
	{OV5640_PROP_WND,	OV5640_WND_LD},
	{OV5640_PROP_RES,	OV5640_RES_CIF},
	{OV5640_PROP_IF,	OV5640_IF_LD},
};

static struct ecs_state_cfg ov5640_state_uyvy_hqvga[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_UYVY},
	{OV5640_PROP_WND,	OV5640_WND_LD},
	{OV5640_PROP_RES,	OV5640_RES_HQVGA},
	{OV5640_PROP_IF,	OV5640_IF_LD},
};

static struct ecs_state_cfg ov5640_state_uyvy_qvga[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_UYVY},
	{OV5640_PROP_WND,	OV5640_WND_LD},
	{OV5640_PROP_RES,	OV5640_RES_QVGA},
	{OV5640_PROP_IF,	OV5640_IF_LD},
};

static struct ecs_state_cfg ov5640_state_uyvy_vga[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_UYVY},
	{OV5640_PROP_WND,	OV5640_WND_LD},
	{OV5640_PROP_RES,	OV5640_RES_VGA},
	{OV5640_PROP_IF,	OV5640_IF_LD},
};

static struct ecs_state_cfg ov5640_state_uyvy_wvga[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_UYVY},
	{OV5640_PROP_WND,	OV5640_WND_LDW},
	{OV5640_PROP_RES,	OV5640_RES_WVGA},
	{OV5640_PROP_IF,	OV5640_IF_LD},
};

static struct ecs_state_cfg ov5640_state_uyvy_d1[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_UYVY},
	{OV5640_PROP_WND,	OV5640_WND_LD},
	{OV5640_PROP_RES,	OV5640_RES_D1},
	{OV5640_PROP_IF,	OV5640_IF_LD},
};

static struct ecs_state_cfg ov5640_state_uyvy_720p[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_UYVY},
	{OV5640_PROP_WND,	OV5640_WND_HD},
	{OV5640_PROP_RES,	OV5640_RES_720P},
	{OV5640_PROP_IF,	OV5640_IF_720P},
};

static struct ecs_state_cfg ov5640_state_uyvy_1080p[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_UYVY},
	{OV5640_PROP_WND,	OV5640_WND_1080P},
	{OV5640_PROP_RES,	OV5640_RES_1080P},
	{OV5640_PROP_IF,	OV5640_IF_1080P},
};

static struct ecs_state_cfg ov5640_state_uyvy_5m[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_UYVY},
	{OV5640_PROP_WND,	OV5640_WND_5M},
	{OV5640_PROP_RES,	OV5640_RES_5M},
	{OV5640_PROP_IF,	OV5640_IF_5M},
};

static struct ecs_state_cfg ov5640_state_jpeg_qvga[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_JPEG},
	{OV5640_PROP_WND,	OV5640_WND_FULL},
	{OV5640_PROP_RES,	OV5640_RES_QVGA},
	{OV5640_PROP_IF,	OV5640_IF_JPG},
};

static struct ecs_state_cfg ov5640_state_jpeg_vga[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_JPEG},
	{OV5640_PROP_WND,	OV5640_WND_FULL},
	{OV5640_PROP_RES,	OV5640_RES_VGA},
	{OV5640_PROP_IF,	OV5640_IF_JPG},
};

static struct ecs_state_cfg ov5640_state_jpeg_3m[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_JPEG},
	{OV5640_PROP_WND,	OV5640_WND_FULL},
	{OV5640_PROP_RES,	OV5640_RES_3M},
	{OV5640_PROP_IF,	OV5640_IF_JPG},
};

static struct ecs_state_cfg ov5640_state_jpeg_5m[] = {
	{OV5640_PROP_FMT,	OV5640_FMT_JPEG},
	{OV5640_PROP_WND,	OV5640_WND_FULL},
	{OV5640_PROP_RES,	OV5640_RES_5M},
	{OV5640_PROP_IF,	OV5640_IF_JPG},
};

#define OV5640_DECLARE_STATE(VAL, val) \
	__DECLARE_STATE(OV5640, ov5640, VAL, val)
static struct ecs_state ov5640_state_table[OV5640_ST_END] = {
	OV5640_DECLARE_STATE(UYVY_QCIF, uyvy_qcif),
	OV5640_DECLARE_STATE(UYVY_CIF, uyvy_cif),
	OV5640_DECLARE_STATE(UYVY_HQVGA, uyvy_hqvga),
	OV5640_DECLARE_STATE(UYVY_QVGA, uyvy_qvga),
	OV5640_DECLARE_STATE(UYVY_VGA, uyvy_vga),
	OV5640_DECLARE_STATE(UYVY_WVGA, uyvy_wvga),
	OV5640_DECLARE_STATE(UYVY_D1, uyvy_d1),
	OV5640_DECLARE_STATE(UYVY_720P, uyvy_720p),
	OV5640_DECLARE_STATE(UYVY_1080P, uyvy_1080p),
	OV5640_DECLARE_STATE(UYVY_5M, uyvy_5m),
	OV5640_DECLARE_STATE(JPEG_QVGA, jpeg_qvga),
	OV5640_DECLARE_STATE(JPEG_VGA, jpeg_vga),
	OV5640_DECLARE_STATE(JPEG_3M, jpeg_3m),
	OV5640_DECLARE_STATE(JPEG_5M, jpeg_5m),
};

static struct x_i2c ov5640_xic = {
	.ident_addr	= {0x300A, 0x300B},
	.ident_mask	= {0xFF, 0xFF},
	.ident_data	= {0x56, 0x40},
	.ident_regs	= 2,
	.reset_addr	= 0x3008,
	.reset_mask	= 0x80,
	.read		= xic_read_wb,
	.write		= xic_write_wb,
	.write_array	= xic_write_array_wb,
	.write_burst	= xic_write_burst_wb,
	.detect		= xic_detect_wb,
};

/* This struct is acually the code to instantize ECS to ov5640 driver */
static struct ecs_sensor generic_ov5640 = {
	.name		= "ov5640",
	.speculate	= 1,
	.prop_tab	= ov5640_property_table,
	.prop_num	= OV5640_PROP_END,
	.state_tab	= ov5640_state_table,
	.state_num	= OV5640_ST_END,
	.state_now	= UNSET,
	.hw_ctx		= &ov5640_xic,
};

/* x_subdev related */
/* The supported format*resolutions mapping table */
static struct v4l2_mbus_framefmt ov5640_fmt_map[OV5640_ST_END];
static int ov5640_enum_map[OV5640_FMT_END * 2];

struct v4l2_ctrl_config ov5640_fw_cfg = {
	.id	= V4L2_CID_PRIVATE_FIRMWARE_DOWNLOAD,
	.name	= "sensor firmware download",
	.min	= 0,
	.max	= OV5640_FW_END,
	.step	= 1,
	.def	= OV5640_FW_SUNNY,
	.type	= V4L2_CTRL_TYPE_INTEGER,
};
struct v4l2_ctrl_config ov5640_phy_cfg = {
	.id	= V4L2_CID_PRIVATE_GET_MIPI_PHY,
	.name	= "get CSI2PHY setting",
	.min	= 0,
	.max	= OV5640_IF_END,
	.step	= 1,
	.type	= V4L2_CTRL_TYPE_INTEGER,
	.is_private	= 1,	/* only keep it inside driver*/
};
static struct xsd_cid ov5640_cid_list[] = {
	{
		.cfg	= &ov5640_fw_cfg,
		.prop	= {
			.prop_id	= OV5640_PROP_FW,
			.prop_val	= OV5640_FW_SUNNY,
		},
	},
	{
		.cfg	= &ov5640_phy_cfg,
		.prop = {
			.prop_id	= OV5640_PROP_IF,
		},
	},
	/* TODO: add item according to the CID type
	{	// for standard CID, just assign
		.cid	= V4L2_CID_XXXX_XXXX,
		.prop	= {
			.prop_id	= OV5640_PROP_XXXX,
			.prop_val	= OV5640_CID_DEFAULT_VALUE,
		},
	}, {	// for private CID, struct v4l2_ctrl_config must be set:
		.cfg	= &ov5640_xxx_cfg,
		.prop	= {
			.prop_id	= OV5640_PROP_XXXX,
		},
	}*/
};

struct v4l2_subdev_video_ops ov564x_video_ops = {
	.g_frame_interval	= ov5640_g_frame_interval,
};

struct v4l2_subdev_ops ov564x_ops = {
	.video	= &ov564x_video_ops,
};

static struct x_subdev ov5640_xsd = {
	.ecs		= &generic_ov5640,
	.ops		= &ov564x_ops,	/* Contain specialized functions only */
	.cid_list	= ov5640_cid_list,
	.cid_cnt	= ARRAY_SIZE(ov5640_cid_list),
	.state_map	= ov5640_fmt_map,
	.enum_map	= ov5640_enum_map,
	.init_id	= OV5640_PROP_INIT,
	.fmt_id		= OV5640_PROP_FMT,
	.res_id		= OV5640_PROP_RES,
	.str_id		= OV5640_PROP_STM,
	.ifc_id		= OV5640_PROP_IF,
	.get_profile	= &ov5640_get_profile,
	.get_fmt_code	= &xsd_default_get_fmt_code,
	.get_res_desc	= &xsd_default_get_res_desc,
	.get_mbus_cfg	= (int (*)(void *, struct v4l2_mbus_config *))
				&csi2phy_desc_to_mbus_cfg,
};

/********************** platform specific configuration **********************/

static struct ecs_property nevo_spec_prop[] = {
	{
		.name		= "MIPI_2LANE",
		.id		= OV5640_PROP_MIPI,
		.stn_tab	= ov5640_mipi_2l_stn_table,
		.stn_num	= OV5640_MIPI_2L_END,
		.speculate	= 1,
	},
};

static struct ecs_property pxa98x_spec_prop[] = {
	{
		.name		= "MIPI_2LANE",
		.id		= OV5640_PROP_MIPI,
		.stn_tab	= ov5640_mipi_2l_stn_table,
		.stn_num	= OV5640_MIPI_2L_END,
		.speculate	= 1,
	},
};

static struct ecs_sensor nevo_spec = {
	.name		= "nevo specific settings",
	.prop_tab	= nevo_spec_prop,
	.prop_num	= ARRAY_SIZE(nevo_spec_prop),
};

static struct ecs_sensor pxa98x_spec = {
	.name		= "pxa98x specific settings",
	.prop_tab	= pxa98x_spec_prop,
	.prop_num	= ARRAY_SIZE(pxa98x_spec_prop),
};

static __attribute__((unused)) int nevo_state_list[] = {
	OV5640_ST_UYVY_QCIF,
	OV5640_ST_UYVY_HQVGA,
	OV5640_ST_UYVY_QVGA,
	OV5640_ST_UYVY_VGA,
	OV5640_ST_UYVY_720P,
	OV5640_ST_UYVY_1080P,
	OV5640_ST_UYVY_5M,
	OV5640_ST_JPEG_5M,
};

static __attribute__((unused)) int td_state_list[] = {
	OV5640_ST_UYVY_QCIF,
	OV5640_ST_UYVY_CIF,
	OV5640_ST_UYVY_QVGA,
	OV5640_ST_UYVY_VGA,
	OV5640_ST_UYVY_WVGA,
	OV5640_ST_UYVY_D1,
	OV5640_ST_UYVY_720P,
	OV5640_ST_UYVY_1080P,
	OV5640_ST_JPEG_QVGA,
	OV5640_ST_JPEG_VGA,
	OV5640_ST_JPEG_3M,
	OV5640_ST_JPEG_5M,
};

static __attribute__((unused)) int pxa98x_state_list[] = {
	OV5640_ST_UYVY_QCIF,
	OV5640_ST_UYVY_HQVGA,
	OV5640_ST_UYVY_QVGA,
	OV5640_ST_UYVY_VGA,
	OV5640_ST_UYVY_D1,
	OV5640_ST_UYVY_720P,
	OV5640_ST_UYVY_1080P,
	OV5640_ST_UYVY_5M,
	OV5640_ST_JPEG_3M,
	OV5640_ST_JPEG_5M,
};

struct xsd_spec_item ov5640_spec_list[] = {
	{
		.name		= "tavor-mipi",
		.state_list	= nevo_state_list,
		.state_cnt	= ARRAY_SIZE(nevo_state_list),
		.ecs		= &nevo_spec,
	},
	{
		.name		= "pxa-mipi",
		.state_list	= pxa98x_state_list,
		.state_cnt	= ARRAY_SIZE(pxa98x_state_list),
		.ecs		= &pxa98x_spec,
	},
};

/************************* Finally the big data boss *************************/
static const struct xsd_driver_id ov564x_drv_table[] = {
	{
		.name		= "ov5640",
		.prototype	= &ov5640_xsd,
		.spec_list	= ov5640_spec_list,
		.spec_cnt	= ARRAY_SIZE(ov5640_spec_list),
	},
	/* TODO: add more driver structure above this end mark */
	{},
};

#endif
